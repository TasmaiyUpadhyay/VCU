
ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c0c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08006ed8  08006ed8  00007ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080072b4  080072b4  000082b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080072bc  080072bc  000082bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080072c0  080072c0  000082c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000018  24000000  080072c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  24000018  080072dc  00009018  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400016c  080072dc  0000916c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014619  00000000  00000000  00009046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002267  00000000  00000000  0001d65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e10  00000000  00000000  0001f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ae1  00000000  00000000  000206d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031d5c  00000000  00000000  000211b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001150f  00000000  00000000  00052f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00149751  00000000  00000000  00064424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001adb75  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c14  00000000  00000000  001adbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000048  00000000  00000000  001b17cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006ec0 	.word	0x08006ec0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	08006ec0 	.word	0x08006ec0

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b988 	b.w	8000644 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	468e      	mov	lr, r1
 8000354:	4604      	mov	r4, r0
 8000356:	4688      	mov	r8, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4617      	mov	r7, r2
 8000360:	d962      	bls.n	8000428 <__udivmoddi4+0xdc>
 8000362:	fab2 f682 	clz	r6, r2
 8000366:	b14e      	cbz	r6, 800037c <__udivmoddi4+0x30>
 8000368:	f1c6 0320 	rsb	r3, r6, #32
 800036c:	fa01 f806 	lsl.w	r8, r1, r6
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	40b7      	lsls	r7, r6
 8000376:	ea43 0808 	orr.w	r8, r3, r8
 800037a:	40b4      	lsls	r4, r6
 800037c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fbb8 f1fe 	udiv	r1, r8, lr
 8000388:	0c23      	lsrs	r3, r4, #16
 800038a:	fb0e 8811 	mls	r8, lr, r1, r8
 800038e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000392:	fb01 f20c 	mul.w	r2, r1, ip
 8000396:	429a      	cmp	r2, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x62>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a0:	f080 80ea 	bcs.w	8000578 <__udivmoddi4+0x22c>
 80003a4:	429a      	cmp	r2, r3
 80003a6:	f240 80e7 	bls.w	8000578 <__udivmoddi4+0x22c>
 80003aa:	3902      	subs	r1, #2
 80003ac:	443b      	add	r3, r7
 80003ae:	1a9a      	subs	r2, r3, r2
 80003b0:	b2a3      	uxth	r3, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003be:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c2:	459c      	cmp	ip, r3
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0x8e>
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003cc:	f080 80d6 	bcs.w	800057c <__udivmoddi4+0x230>
 80003d0:	459c      	cmp	ip, r3
 80003d2:	f240 80d3 	bls.w	800057c <__udivmoddi4+0x230>
 80003d6:	443b      	add	r3, r7
 80003d8:	3802      	subs	r0, #2
 80003da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003de:	eba3 030c 	sub.w	r3, r3, ip
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11d      	cbz	r5, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40f3      	lsrs	r3, r6
 80003e8:	2200      	movs	r2, #0
 80003ea:	e9c5 3200 	strd	r3, r2, [r5]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d905      	bls.n	8000402 <__udivmoddi4+0xb6>
 80003f6:	b10d      	cbz	r5, 80003fc <__udivmoddi4+0xb0>
 80003f8:	e9c5 0100 	strd	r0, r1, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	4608      	mov	r0, r1
 8000400:	e7f5      	b.n	80003ee <__udivmoddi4+0xa2>
 8000402:	fab3 f183 	clz	r1, r3
 8000406:	2900      	cmp	r1, #0
 8000408:	d146      	bne.n	8000498 <__udivmoddi4+0x14c>
 800040a:	4573      	cmp	r3, lr
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xc8>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 8105 	bhi.w	800061e <__udivmoddi4+0x2d2>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb6e 0203 	sbc.w	r2, lr, r3
 800041a:	2001      	movs	r0, #1
 800041c:	4690      	mov	r8, r2
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e5      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000422:	e9c5 4800 	strd	r4, r8, [r5]
 8000426:	e7e2      	b.n	80003ee <__udivmoddi4+0xa2>
 8000428:	2a00      	cmp	r2, #0
 800042a:	f000 8090 	beq.w	800054e <__udivmoddi4+0x202>
 800042e:	fab2 f682 	clz	r6, r2
 8000432:	2e00      	cmp	r6, #0
 8000434:	f040 80a4 	bne.w	8000580 <__udivmoddi4+0x234>
 8000438:	1a8a      	subs	r2, r1, r2
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	b280      	uxth	r0, r0
 8000442:	b2bc      	uxth	r4, r7
 8000444:	2101      	movs	r1, #1
 8000446:	fbb2 fcfe 	udiv	ip, r2, lr
 800044a:	fb0e 221c 	mls	r2, lr, ip, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb04 f20c 	mul.w	r2, r4, ip
 8000456:	429a      	cmp	r2, r3
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x11e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x11c>
 8000462:	429a      	cmp	r2, r3
 8000464:	f200 80e0 	bhi.w	8000628 <__udivmoddi4+0x2dc>
 8000468:	46c4      	mov	ip, r8
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000470:	fb0e 3312 	mls	r3, lr, r2, r3
 8000474:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000478:	fb02 f404 	mul.w	r4, r2, r4
 800047c:	429c      	cmp	r4, r3
 800047e:	d907      	bls.n	8000490 <__udivmoddi4+0x144>
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	f102 30ff 	add.w	r0, r2, #4294967295
 8000486:	d202      	bcs.n	800048e <__udivmoddi4+0x142>
 8000488:	429c      	cmp	r4, r3
 800048a:	f200 80ca 	bhi.w	8000622 <__udivmoddi4+0x2d6>
 800048e:	4602      	mov	r2, r0
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000496:	e7a5      	b.n	80003e4 <__udivmoddi4+0x98>
 8000498:	f1c1 0620 	rsb	r6, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 f706 	lsr.w	r7, r2, r6
 80004a2:	431f      	orrs	r7, r3
 80004a4:	fa0e f401 	lsl.w	r4, lr, r1
 80004a8:	fa20 f306 	lsr.w	r3, r0, r6
 80004ac:	fa2e fe06 	lsr.w	lr, lr, r6
 80004b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ba:	fa1f fc87 	uxth.w	ip, r7
 80004be:	fbbe f0f9 	udiv	r0, lr, r9
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004c8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004cc:	fb00 fe0c 	mul.w	lr, r0, ip
 80004d0:	45a6      	cmp	lr, r4
 80004d2:	fa02 f201 	lsl.w	r2, r2, r1
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x1a0>
 80004d8:	193c      	adds	r4, r7, r4
 80004da:	f100 3aff 	add.w	sl, r0, #4294967295
 80004de:	f080 809c 	bcs.w	800061a <__udivmoddi4+0x2ce>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	f240 8099 	bls.w	800061a <__udivmoddi4+0x2ce>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	eba4 040e 	sub.w	r4, r4, lr
 80004f0:	fa1f fe83 	uxth.w	lr, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000500:	fb03 fc0c 	mul.w	ip, r3, ip
 8000504:	45a4      	cmp	ip, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1ce>
 8000508:	193c      	adds	r4, r7, r4
 800050a:	f103 3eff 	add.w	lr, r3, #4294967295
 800050e:	f080 8082 	bcs.w	8000616 <__udivmoddi4+0x2ca>
 8000512:	45a4      	cmp	ip, r4
 8000514:	d97f      	bls.n	8000616 <__udivmoddi4+0x2ca>
 8000516:	3b02      	subs	r3, #2
 8000518:	443c      	add	r4, r7
 800051a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800051e:	eba4 040c 	sub.w	r4, r4, ip
 8000522:	fba0 ec02 	umull	lr, ip, r0, r2
 8000526:	4564      	cmp	r4, ip
 8000528:	4673      	mov	r3, lr
 800052a:	46e1      	mov	r9, ip
 800052c:	d362      	bcc.n	80005f4 <__udivmoddi4+0x2a8>
 800052e:	d05f      	beq.n	80005f0 <__udivmoddi4+0x2a4>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x1fe>
 8000532:	ebb8 0203 	subs.w	r2, r8, r3
 8000536:	eb64 0409 	sbc.w	r4, r4, r9
 800053a:	fa04 f606 	lsl.w	r6, r4, r6
 800053e:	fa22 f301 	lsr.w	r3, r2, r1
 8000542:	431e      	orrs	r6, r3
 8000544:	40cc      	lsrs	r4, r1
 8000546:	e9c5 6400 	strd	r6, r4, [r5]
 800054a:	2100      	movs	r1, #0
 800054c:	e74f      	b.n	80003ee <__udivmoddi4+0xa2>
 800054e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000552:	0c01      	lsrs	r1, r0, #16
 8000554:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000558:	b280      	uxth	r0, r0
 800055a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800055e:	463b      	mov	r3, r7
 8000560:	4638      	mov	r0, r7
 8000562:	463c      	mov	r4, r7
 8000564:	46b8      	mov	r8, r7
 8000566:	46be      	mov	lr, r7
 8000568:	2620      	movs	r6, #32
 800056a:	fbb1 f1f7 	udiv	r1, r1, r7
 800056e:	eba2 0208 	sub.w	r2, r2, r8
 8000572:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000576:	e766      	b.n	8000446 <__udivmoddi4+0xfa>
 8000578:	4601      	mov	r1, r0
 800057a:	e718      	b.n	80003ae <__udivmoddi4+0x62>
 800057c:	4610      	mov	r0, r2
 800057e:	e72c      	b.n	80003da <__udivmoddi4+0x8e>
 8000580:	f1c6 0220 	rsb	r2, r6, #32
 8000584:	fa2e f302 	lsr.w	r3, lr, r2
 8000588:	40b7      	lsls	r7, r6
 800058a:	40b1      	lsls	r1, r6
 800058c:	fa20 f202 	lsr.w	r2, r0, r2
 8000590:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000594:	430a      	orrs	r2, r1
 8000596:	fbb3 f8fe 	udiv	r8, r3, lr
 800059a:	b2bc      	uxth	r4, r7
 800059c:	fb0e 3318 	mls	r3, lr, r8, r3
 80005a0:	0c11      	lsrs	r1, r2, #16
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb08 f904 	mul.w	r9, r8, r4
 80005aa:	40b0      	lsls	r0, r6
 80005ac:	4589      	cmp	r9, r1
 80005ae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005b2:	b280      	uxth	r0, r0
 80005b4:	d93e      	bls.n	8000634 <__udivmoddi4+0x2e8>
 80005b6:	1879      	adds	r1, r7, r1
 80005b8:	f108 3cff 	add.w	ip, r8, #4294967295
 80005bc:	d201      	bcs.n	80005c2 <__udivmoddi4+0x276>
 80005be:	4589      	cmp	r9, r1
 80005c0:	d81f      	bhi.n	8000602 <__udivmoddi4+0x2b6>
 80005c2:	eba1 0109 	sub.w	r1, r1, r9
 80005c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ca:	fb09 f804 	mul.w	r8, r9, r4
 80005ce:	fb0e 1119 	mls	r1, lr, r9, r1
 80005d2:	b292      	uxth	r2, r2
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	4542      	cmp	r2, r8
 80005da:	d229      	bcs.n	8000630 <__udivmoddi4+0x2e4>
 80005dc:	18ba      	adds	r2, r7, r2
 80005de:	f109 31ff 	add.w	r1, r9, #4294967295
 80005e2:	d2c4      	bcs.n	800056e <__udivmoddi4+0x222>
 80005e4:	4542      	cmp	r2, r8
 80005e6:	d2c2      	bcs.n	800056e <__udivmoddi4+0x222>
 80005e8:	f1a9 0102 	sub.w	r1, r9, #2
 80005ec:	443a      	add	r2, r7
 80005ee:	e7be      	b.n	800056e <__udivmoddi4+0x222>
 80005f0:	45f0      	cmp	r8, lr
 80005f2:	d29d      	bcs.n	8000530 <__udivmoddi4+0x1e4>
 80005f4:	ebbe 0302 	subs.w	r3, lr, r2
 80005f8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005fc:	3801      	subs	r0, #1
 80005fe:	46e1      	mov	r9, ip
 8000600:	e796      	b.n	8000530 <__udivmoddi4+0x1e4>
 8000602:	eba7 0909 	sub.w	r9, r7, r9
 8000606:	4449      	add	r1, r9
 8000608:	f1a8 0c02 	sub.w	ip, r8, #2
 800060c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000610:	fb09 f804 	mul.w	r8, r9, r4
 8000614:	e7db      	b.n	80005ce <__udivmoddi4+0x282>
 8000616:	4673      	mov	r3, lr
 8000618:	e77f      	b.n	800051a <__udivmoddi4+0x1ce>
 800061a:	4650      	mov	r0, sl
 800061c:	e766      	b.n	80004ec <__udivmoddi4+0x1a0>
 800061e:	4608      	mov	r0, r1
 8000620:	e6fd      	b.n	800041e <__udivmoddi4+0xd2>
 8000622:	443b      	add	r3, r7
 8000624:	3a02      	subs	r2, #2
 8000626:	e733      	b.n	8000490 <__udivmoddi4+0x144>
 8000628:	f1ac 0c02 	sub.w	ip, ip, #2
 800062c:	443b      	add	r3, r7
 800062e:	e71c      	b.n	800046a <__udivmoddi4+0x11e>
 8000630:	4649      	mov	r1, r9
 8000632:	e79c      	b.n	800056e <__udivmoddi4+0x222>
 8000634:	eba1 0109 	sub.w	r1, r1, r9
 8000638:	46c4      	mov	ip, r8
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	e7c4      	b.n	80005ce <__udivmoddi4+0x282>

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <error>:
// data is a struct containing all the necessary CAN parameters


//error handler function

void error(uint8_t error_code) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

    switch (error_code){
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2bf1      	cmp	r3, #241	@ 0xf1
 8000656:	f000 817f 	beq.w	8000958 <error+0x310>
 800065a:	2bf1      	cmp	r3, #241	@ 0xf1
 800065c:	f300 818c 	bgt.w	8000978 <error+0x330>
 8000660:	2ba8      	cmp	r3, #168	@ 0xa8
 8000662:	f300 8189 	bgt.w	8000978 <error+0x330>
 8000666:	2b35      	cmp	r3, #53	@ 0x35
 8000668:	da06      	bge.n	8000678 <error+0x30>
 800066a:	2b03      	cmp	r3, #3
 800066c:	f000 813c 	beq.w	80008e8 <error+0x2a0>
 8000670:	2b06      	cmp	r3, #6
 8000672:	f000 8131 	beq.w	80008d8 <error+0x290>
 8000676:	e17f      	b.n	8000978 <error+0x330>
 8000678:	3b35      	subs	r3, #53	@ 0x35
 800067a:	2b73      	cmp	r3, #115	@ 0x73
 800067c:	f200 817c 	bhi.w	8000978 <error+0x330>
 8000680:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <error+0x40>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080008f9 	.word	0x080008f9
 800068c:	08000909 	.word	0x08000909
 8000690:	08000979 	.word	0x08000979
 8000694:	08000979 	.word	0x08000979
 8000698:	08000979 	.word	0x08000979
 800069c:	08000979 	.word	0x08000979
 80006a0:	08000979 	.word	0x08000979
 80006a4:	08000979 	.word	0x08000979
 80006a8:	08000979 	.word	0x08000979
 80006ac:	08000979 	.word	0x08000979
 80006b0:	08000979 	.word	0x08000979
 80006b4:	08000979 	.word	0x08000979
 80006b8:	08000979 	.word	0x08000979
 80006bc:	08000979 	.word	0x08000979
 80006c0:	08000979 	.word	0x08000979
 80006c4:	08000979 	.word	0x08000979
 80006c8:	08000979 	.word	0x08000979
 80006cc:	08000979 	.word	0x08000979
 80006d0:	08000979 	.word	0x08000979
 80006d4:	08000979 	.word	0x08000979
 80006d8:	08000979 	.word	0x08000979
 80006dc:	08000979 	.word	0x08000979
 80006e0:	08000979 	.word	0x08000979
 80006e4:	08000979 	.word	0x08000979
 80006e8:	08000979 	.word	0x08000979
 80006ec:	08000979 	.word	0x08000979
 80006f0:	08000979 	.word	0x08000979
 80006f4:	08000979 	.word	0x08000979
 80006f8:	08000979 	.word	0x08000979
 80006fc:	08000979 	.word	0x08000979
 8000700:	08000929 	.word	0x08000929
 8000704:	08000979 	.word	0x08000979
 8000708:	08000979 	.word	0x08000979
 800070c:	08000919 	.word	0x08000919
 8000710:	08000979 	.word	0x08000979
 8000714:	08000979 	.word	0x08000979
 8000718:	08000979 	.word	0x08000979
 800071c:	08000979 	.word	0x08000979
 8000720:	08000979 	.word	0x08000979
 8000724:	08000979 	.word	0x08000979
 8000728:	08000979 	.word	0x08000979
 800072c:	08000979 	.word	0x08000979
 8000730:	08000979 	.word	0x08000979
 8000734:	08000979 	.word	0x08000979
 8000738:	08000979 	.word	0x08000979
 800073c:	08000979 	.word	0x08000979
 8000740:	08000949 	.word	0x08000949
 8000744:	08000979 	.word	0x08000979
 8000748:	08000979 	.word	0x08000979
 800074c:	08000939 	.word	0x08000939
 8000750:	08000979 	.word	0x08000979
 8000754:	08000979 	.word	0x08000979
 8000758:	08000979 	.word	0x08000979
 800075c:	08000979 	.word	0x08000979
 8000760:	08000979 	.word	0x08000979
 8000764:	08000979 	.word	0x08000979
 8000768:	08000979 	.word	0x08000979
 800076c:	08000979 	.word	0x08000979
 8000770:	08000979 	.word	0x08000979
 8000774:	08000979 	.word	0x08000979
 8000778:	08000979 	.word	0x08000979
 800077c:	08000979 	.word	0x08000979
 8000780:	08000979 	.word	0x08000979
 8000784:	08000969 	.word	0x08000969
 8000788:	08000979 	.word	0x08000979
 800078c:	08000979 	.word	0x08000979
 8000790:	08000979 	.word	0x08000979
 8000794:	08000979 	.word	0x08000979
 8000798:	08000979 	.word	0x08000979
 800079c:	08000979 	.word	0x08000979
 80007a0:	08000979 	.word	0x08000979
 80007a4:	08000979 	.word	0x08000979
 80007a8:	08000979 	.word	0x08000979
 80007ac:	08000979 	.word	0x08000979
 80007b0:	08000979 	.word	0x08000979
 80007b4:	08000979 	.word	0x08000979
 80007b8:	08000979 	.word	0x08000979
 80007bc:	08000979 	.word	0x08000979
 80007c0:	08000979 	.word	0x08000979
 80007c4:	08000979 	.word	0x08000979
 80007c8:	08000979 	.word	0x08000979
 80007cc:	08000979 	.word	0x08000979
 80007d0:	08000979 	.word	0x08000979
 80007d4:	08000979 	.word	0x08000979
 80007d8:	08000979 	.word	0x08000979
 80007dc:	08000979 	.word	0x08000979
 80007e0:	08000979 	.word	0x08000979
 80007e4:	08000979 	.word	0x08000979
 80007e8:	08000979 	.word	0x08000979
 80007ec:	08000979 	.word	0x08000979
 80007f0:	08000979 	.word	0x08000979
 80007f4:	08000979 	.word	0x08000979
 80007f8:	08000979 	.word	0x08000979
 80007fc:	08000979 	.word	0x08000979
 8000800:	08000979 	.word	0x08000979
 8000804:	08000979 	.word	0x08000979
 8000808:	08000979 	.word	0x08000979
 800080c:	08000979 	.word	0x08000979
 8000810:	08000979 	.word	0x08000979
 8000814:	08000979 	.word	0x08000979
 8000818:	08000979 	.word	0x08000979
 800081c:	08000979 	.word	0x08000979
 8000820:	08000979 	.word	0x08000979
 8000824:	08000979 	.word	0x08000979
 8000828:	08000979 	.word	0x08000979
 800082c:	08000979 	.word	0x08000979
 8000830:	08000979 	.word	0x08000979
 8000834:	08000979 	.word	0x08000979
 8000838:	08000859 	.word	0x08000859
 800083c:	08000869 	.word	0x08000869
 8000840:	08000879 	.word	0x08000879
 8000844:	08000889 	.word	0x08000889
 8000848:	08000899 	.word	0x08000899
 800084c:	080008a9 	.word	0x080008a9
 8000850:	080008b9 	.word	0x080008b9
 8000854:	080008c9 	.word	0x080008c9
        case CAN_START_FAIL:
        	LOG((uint8_t*)"ERROR: CAN failed to start!\r\n",strlen("ERROR: CAN failed to start!\r\n"));
 8000858:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800085c:	221d      	movs	r2, #29
 800085e:	494c      	ldr	r1, [pc, #304]	@ (8000990 <error+0x348>)
 8000860:	484c      	ldr	r0, [pc, #304]	@ (8000994 <error+0x34c>)
 8000862:	f005 f8d5 	bl	8005a10 <HAL_UART_Transmit>
           break;
 8000866:	e08f      	b.n	8000988 <error+0x340>

        case CAN_NOTIFICATION_FAIL:
        	LOG((uint8_t*)"ERROR: Failed to activate CAN notifications!\r\n",strlen("ERROR: Failed to activate CAN notifications!\r\n"));
 8000868:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800086c:	222e      	movs	r2, #46	@ 0x2e
 800086e:	494a      	ldr	r1, [pc, #296]	@ (8000998 <error+0x350>)
 8000870:	4848      	ldr	r0, [pc, #288]	@ (8000994 <error+0x34c>)
 8000872:	f005 f8cd 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000876:	e087      	b.n	8000988 <error+0x340>

        case CAN_TRANSMISSION_FAIL:
        	LOG((uint8_t*)"ERROR: CAN data transmission failed!\r\n",strlen("ERROR: CAN data transmission failed!\r\n"));
 8000878:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800087c:	2226      	movs	r2, #38	@ 0x26
 800087e:	4947      	ldr	r1, [pc, #284]	@ (800099c <error+0x354>)
 8000880:	4844      	ldr	r0, [pc, #272]	@ (8000994 <error+0x34c>)
 8000882:	f005 f8c5 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000886:	e07f      	b.n	8000988 <error+0x340>

        case CAN_RECEPTION_FAIL:
        	LOG((uint8_t*)"ERROR: CAN reception failed!\r\n",strlen("ERROR: CAN reception failed!\r\n"));
 8000888:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800088c:	221e      	movs	r2, #30
 800088e:	4944      	ldr	r1, [pc, #272]	@ (80009a0 <error+0x358>)
 8000890:	4840      	ldr	r0, [pc, #256]	@ (8000994 <error+0x34c>)
 8000892:	f005 f8bd 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000896:	e077      	b.n	8000988 <error+0x340>

        case CAN_FILTER1_FAIL:
        	LOG((uint8_t*)"ERROR: CAN Filter 1 configuration failed!\r\n",strlen("ERROR: CAN Filter 1 configuration failed!\r\n"));
 8000898:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800089c:	222b      	movs	r2, #43	@ 0x2b
 800089e:	4941      	ldr	r1, [pc, #260]	@ (80009a4 <error+0x35c>)
 80008a0:	483c      	ldr	r0, [pc, #240]	@ (8000994 <error+0x34c>)
 80008a2:	f005 f8b5 	bl	8005a10 <HAL_UART_Transmit>
            break;
 80008a6:	e06f      	b.n	8000988 <error+0x340>

        case CAN_FILTER2_FAIL:
        	LOG((uint8_t*)"ERROR: CAN Filter 2 configuration failed!\r\n",strlen("ERROR: CAN Filter 2 configuration failed!\r\n"));
 80008a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008ac:	222b      	movs	r2, #43	@ 0x2b
 80008ae:	493e      	ldr	r1, [pc, #248]	@ (80009a8 <error+0x360>)
 80008b0:	4838      	ldr	r0, [pc, #224]	@ (8000994 <error+0x34c>)
 80008b2:	f005 f8ad 	bl	8005a10 <HAL_UART_Transmit>
            break;
 80008b6:	e067      	b.n	8000988 <error+0x340>

        case CAN_FIFO_NULL:
        	LOG((uint8_t*)"WARNING: Received NULL FIFO data!\r\n",strlen("WARNING: Received NULL FIFO data!\r\n"));
 80008b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008bc:	2223      	movs	r2, #35	@ 0x23
 80008be:	493b      	ldr	r1, [pc, #236]	@ (80009ac <error+0x364>)
 80008c0:	4834      	ldr	r0, [pc, #208]	@ (8000994 <error+0x34c>)
 80008c2:	f005 f8a5 	bl	8005a10 <HAL_UART_Transmit>
           break;
 80008c6:	e05f      	b.n	8000988 <error+0x340>
        case CAN_MC_FAIL:
        	LOG((uint8_t*)"WARNING: MC commands failed!\r\n",strlen("WARNING: MC commands failed!\r\n"));
 80008c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008cc:	221e      	movs	r2, #30
 80008ce:	4938      	ldr	r1, [pc, #224]	@ (80009b0 <error+0x368>)
 80008d0:	4830      	ldr	r0, [pc, #192]	@ (8000994 <error+0x34c>)
 80008d2:	f005 f89d 	bl	8005a10 <HAL_UART_Transmit>
        	break;
 80008d6:	e057      	b.n	8000988 <error+0x340>

        // APPS Errors
        case ERROR_APPS_IMPLAUSIBILITY:
        	LOG((uint8_t*)"ERROR: APPS Potentiometer failure!\r\n",strlen("ERROR: APPS Potentiometer failure!\r\n"));
 80008d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008dc:	2224      	movs	r2, #36	@ 0x24
 80008de:	4935      	ldr	r1, [pc, #212]	@ (80009b4 <error+0x36c>)
 80008e0:	482c      	ldr	r0, [pc, #176]	@ (8000994 <error+0x34c>)
 80008e2:	f005 f895 	bl	8005a10 <HAL_UART_Transmit>
            break;
 80008e6:	e04f      	b.n	8000988 <error+0x340>
        case ERROR_APPS_OUT_OF_RANGE:
        	LOG((uint8_t*)"ERROR: APPS Out of Range Value!\r\n",strlen("ERROR: APPS Out of Range Value!\r\n"));
 80008e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008ec:	2221      	movs	r2, #33	@ 0x21
 80008ee:	4932      	ldr	r1, [pc, #200]	@ (80009b8 <error+0x370>)
 80008f0:	4828      	ldr	r0, [pc, #160]	@ (8000994 <error+0x34c>)
 80008f2:	f005 f88d 	bl	8005a10 <HAL_UART_Transmit>
            break;
 80008f6:	e047      	b.n	8000988 <error+0x340>

        // Wheel Speed Sensor Errors
        case ERROR_WHEEL_SPEED_IMPLAUSIBLE:
        	LOG((uint8_t*)"ERROR: Wheel Speed Sensor Calibration Fault!\r\n",strlen("ERROR: Wheel Speed Sensor Calibration Fault!\r\n"));
 80008f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008fc:	222e      	movs	r2, #46	@ 0x2e
 80008fe:	492f      	ldr	r1, [pc, #188]	@ (80009bc <error+0x374>)
 8000900:	4824      	ldr	r0, [pc, #144]	@ (8000994 <error+0x34c>)
 8000902:	f005 f885 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000906:	e03f      	b.n	8000988 <error+0x340>
        case ERROR_WHEEL_SPEED_MISMATCH:
        	LOG((uint8_t*)"WARNING: Mismatched Wheel Speeds!\r\n",strlen("WARNING: Mismatched Wheel Speeds!\r\n"));
 8000908:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800090c:	2223      	movs	r2, #35	@ 0x23
 800090e:	492c      	ldr	r1, [pc, #176]	@ (80009c0 <error+0x378>)
 8000910:	4820      	ldr	r0, [pc, #128]	@ (8000994 <error+0x34c>)
 8000912:	f005 f87d 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000916:	e037      	b.n	8000988 <error+0x340>

        // Brake Pressure Sensor Errors
        case ERROR_BRAKE_LOSS:
        	LOG((uint8_t*)"CRITICAL: Sudden Brake Pressure Drop!\r\n",strlen("CRITICAL: Sudden Brake Pressure Drop!\r\n"));
 8000918:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800091c:	2227      	movs	r2, #39	@ 0x27
 800091e:	4929      	ldr	r1, [pc, #164]	@ (80009c4 <error+0x37c>)
 8000920:	481c      	ldr	r0, [pc, #112]	@ (8000994 <error+0x34c>)
 8000922:	f005 f875 	bl	8005a10 <HAL_UART_Transmit>

            break;
 8000926:	e02f      	b.n	8000988 <error+0x340>
        case ERROR_BRAKE_OUT_OF_RANGE:
        	LOG((uint8_t*)"ERROR: Brake Pressure Sensor Out of Range!\r\n",strlen("ERROR: Brake Pressure Sensor Out of Range!\r\n"));
 8000928:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800092c:	222c      	movs	r2, #44	@ 0x2c
 800092e:	4926      	ldr	r1, [pc, #152]	@ (80009c8 <error+0x380>)
 8000930:	4818      	ldr	r0, [pc, #96]	@ (8000994 <error+0x34c>)
 8000932:	f005 f86d 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000936:	e027      	b.n	8000988 <error+0x340>

        // IMU Errors
        case ERROR_IMU_UNRESPONSIVE:
        	LOG((uint8_t*)"WARNING: IMU Not Responding on CAN Bus!\r\n",strlen("WARNING: IMU Not Responding on CAN Bus!\r\n"));
 8000938:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800093c:	2229      	movs	r2, #41	@ 0x29
 800093e:	4923      	ldr	r1, [pc, #140]	@ (80009cc <error+0x384>)
 8000940:	4814      	ldr	r0, [pc, #80]	@ (8000994 <error+0x34c>)
 8000942:	f005 f865 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000946:	e01f      	b.n	8000988 <error+0x340>

        // Power & Battery Management Errors
        case ERROR_BATTERY_OVERHEAT:
            LOG((uint8_t*)"CRITICAL: Battery Overheating Detected!\r\n",strlen("CRITICAL: Battery Overheating Detected!\r\n"));
 8000948:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800094c:	2229      	movs	r2, #41	@ 0x29
 800094e:	4920      	ldr	r1, [pc, #128]	@ (80009d0 <error+0x388>)
 8000950:	4810      	ldr	r0, [pc, #64]	@ (8000994 <error+0x34c>)
 8000952:	f005 f85d 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000956:	e017      	b.n	8000988 <error+0x340>

        // UART / Communication Errors
        case ERROR_UART_SPI_FAILURE:
        	 LOG((uint8_t*)"WARNING: UART/SPI Communication Error!\r\n",strlen("WARNING: UART/SPI Communication Error!\r\n"));
 8000958:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800095c:	2228      	movs	r2, #40	@ 0x28
 800095e:	491d      	ldr	r1, [pc, #116]	@ (80009d4 <error+0x38c>)
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <error+0x34c>)
 8000962:	f005 f855 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000966:	e00f      	b.n	8000988 <error+0x340>

        // General ECU Failure
        case ERROR_ADC_NOISE:
            LOG((uint8_t*)"ERROR: Unknown Fault Detected!\r\n",strlen("ERROR: Unknown Fault Detected!\r\n"));
 8000968:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800096c:	2220      	movs	r2, #32
 800096e:	491a      	ldr	r1, [pc, #104]	@ (80009d8 <error+0x390>)
 8000970:	4808      	ldr	r0, [pc, #32]	@ (8000994 <error+0x34c>)
 8000972:	f005 f84d 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000976:	e007      	b.n	8000988 <error+0x340>

        // Unknown Errors
        default:
            LOG((uint8_t*)"ERROR: ADC Noise Detected!\r\n",strlen("ERROR: ADC Noise Detected!\r\n"));
 8000978:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800097c:	221c      	movs	r2, #28
 800097e:	4917      	ldr	r1, [pc, #92]	@ (80009dc <error+0x394>)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <error+0x34c>)
 8000982:	f005 f845 	bl	8005a10 <HAL_UART_Transmit>
            break;
 8000986:	bf00      	nop
    }

}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08006f2c 	.word	0x08006f2c
 8000994:	240000d4 	.word	0x240000d4
 8000998:	08006f4c 	.word	0x08006f4c
 800099c:	08006f7c 	.word	0x08006f7c
 80009a0:	08006fa4 	.word	0x08006fa4
 80009a4:	08006fc4 	.word	0x08006fc4
 80009a8:	08006ff0 	.word	0x08006ff0
 80009ac:	0800701c 	.word	0x0800701c
 80009b0:	08007040 	.word	0x08007040
 80009b4:	08007060 	.word	0x08007060
 80009b8:	08007088 	.word	0x08007088
 80009bc:	080070ac 	.word	0x080070ac
 80009c0:	080070dc 	.word	0x080070dc
 80009c4:	08007100 	.word	0x08007100
 80009c8:	08007128 	.word	0x08007128
 80009cc:	08007158 	.word	0x08007158
 80009d0:	08007184 	.word	0x08007184
 80009d4:	080071b0 	.word	0x080071b0
 80009d8:	080071dc 	.word	0x080071dc
 80009dc:	08007200 	.word	0x08007200

080009e0 <CAN_SendMessage>:


// function for transmission of CAN data frames on bus
void CAN_SendMessage(uint16_t id, uint8_t* data, uint8_t DLC) {
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b08d      	sub	sp, #52	@ 0x34
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	80fb      	strh	r3, [r7, #6]
 80009ec:	4613      	mov	r3, r2
 80009ee:	717b      	strb	r3, [r7, #5]
    FDCAN_TxHeaderTypeDef TxHeader;
    TxHeader.Identifier = id;
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	60fb      	str	r3, [r7, #12]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.MessageMarker = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch(DLC){
 8000a10:	797b      	ldrb	r3, [r7, #5]
 8000a12:	3b02      	subs	r3, #2
 8000a14:	2b06      	cmp	r3, #6
 8000a16:	d820      	bhi.n	8000a5a <CAN_SendMessage+0x7a>
 8000a18:	a201      	add	r2, pc, #4	@ (adr r2, 8000a20 <CAN_SendMessage+0x40>)
 8000a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1e:	bf00      	nop
 8000a20:	08000a4f 	.word	0x08000a4f
 8000a24:	08000a55 	.word	0x08000a55
 8000a28:	08000a5b 	.word	0x08000a5b
 8000a2c:	08000a49 	.word	0x08000a49
 8000a30:	08000a43 	.word	0x08000a43
 8000a34:	08000a5b 	.word	0x08000a5b
 8000a38:	08000a3d 	.word	0x08000a3d
    case 8: TxHeader.DataLength=FDCAN_DLC_BYTES_8;break;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	e00d      	b.n	8000a5e <CAN_SendMessage+0x7e>
    case 6: TxHeader.DataLength=FDCAN_DLC_BYTES_6;break;
 8000a42:	2306      	movs	r3, #6
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	e00a      	b.n	8000a5e <CAN_SendMessage+0x7e>
    case 5: TxHeader.DataLength=FDCAN_DLC_BYTES_5;break;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	e007      	b.n	8000a5e <CAN_SendMessage+0x7e>
    case 2: TxHeader.DataLength=FDCAN_DLC_BYTES_2;break;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	e004      	b.n	8000a5e <CAN_SendMessage+0x7e>
    case 3: TxHeader.DataLength=FDCAN_DLC_BYTES_3;break;
 8000a54:	2303      	movs	r3, #3
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	e001      	b.n	8000a5e <CAN_SendMessage+0x7e>
    default: TxHeader.DataLength=FDCAN_DLC_BYTES_8;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	61bb      	str	r3, [r7, #24]
    }
    		if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data)!=HAL_OK){
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <CAN_SendMessage+0xb8>)
 8000a68:	f001 f9ae 	bl	8001dc8 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00e      	beq.n	8000a90 <CAN_SendMessage+0xb0>
    			LOG((uint8_t*)txFailure,strlen(txFailure));
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <CAN_SendMessage+0xbc>)
 8000a74:	681c      	ldr	r4, [r3, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <CAN_SendMessage+0xbc>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fc46 	bl	800030c <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a88:	4621      	mov	r1, r4
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <CAN_SendMessage+0xc0>)
 8000a8c:	f004 ffc0 	bl	8005a10 <HAL_UART_Transmit>
    		}

}
 8000a90:	bf00      	nop
 8000a92:	3734      	adds	r7, #52	@ 0x34
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	24000034 	.word	0x24000034
 8000a9c:	24000000 	.word	0x24000000
 8000aa0:	240000d4 	.word	0x240000d4

08000aa4 <PingPongRec>:

	    	}
}


void PingPongRec(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	uint8_t data[1]={0x54};
 8000aaa:	2354      	movs	r3, #84	@ 0x54
 8000aac:	713b      	strb	r3, [r7, #4]
	CAN_SendMessage(0x102,data,1);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8000ab8:	f7ff ff92 	bl	80009e0 <CAN_SendMessage>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <APPS_and_BPr>:


void APPS_and_BPr(uint8_t *RxData0){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

	if(RxData0==NULL){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <APPS_and_BPr+0x16>
		error(CAN_FIFO_NULL);
 8000ad2:	20a7      	movs	r0, #167	@ 0xa7
 8000ad4:	f7ff fdb8 	bl	8000648 <error>
	else{
		uint16_t APPS1=(RxData0[0]<<8)|RxData0[1];
		uint16_t APPS2=(RxData0[2]<<8)|RxData0[3];
		uint16_t BP=(RxData0[4]<<8)|RxData0[5];
	}
}
 8000ad8:	e025      	b.n	8000b26 <APPS_and_BPr+0x62>
		uint16_t APPS1=(RxData0[0]<<8)|RxData0[1];
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	81fb      	strh	r3, [r7, #14]
		uint16_t APPS2=(RxData0[2]<<8)|RxData0[3];
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3302      	adds	r3, #2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3303      	adds	r3, #3
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	81bb      	strh	r3, [r7, #12]
		uint16_t BP=(RxData0[4]<<8)|RxData0[5];
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3305      	adds	r3, #5
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	817b      	strh	r3, [r7, #10]
}
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <LV_Voltage_Current_and_coolant>:

void LV_Voltage_Current_and_coolant(uint8_t *RxData1){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	if(RxData1==NULL){
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <LV_Voltage_Current_and_coolant+0x16>
		error(CAN_FIFO_NULL);
 8000b3c:	20a7      	movs	r0, #167	@ 0xa7
 8000b3e:	f7ff fd83 	bl	8000648 <error>
		uint16_t LVV=(RxData1[2]<<8)|RxData1[3];
		uint16_t cool1=(RxData1[4]<<8)|RxData1[5];
		uint16_t cool2=(RxData1[6]<<8)|RxData1[7];

	}
}
 8000b42:	e032      	b.n	8000baa <LV_Voltage_Current_and_coolant+0x7c>
		uint16_t LVI=(RxData1[0]<<8)|RxData1[1];
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	81fb      	strh	r3, [r7, #14]
		uint16_t LVV=(RxData1[2]<<8)|RxData1[3];
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3303      	adds	r3, #3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	81bb      	strh	r3, [r7, #12]
		uint16_t cool1=(RxData1[4]<<8)|RxData1[5];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3305      	adds	r3, #5
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	817b      	strh	r3, [r7, #10]
		uint16_t cool2=(RxData1[6]<<8)|RxData1[7];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3306      	adds	r3, #6
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	813b      	strh	r3, [r7, #8]
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <Wheelspeed_and_DampPOTs>:
void Wheelspeed_and_DampPOTs(uint8_t *RxData1){
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	if(RxData1==NULL){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d103      	bne.n	8000bc8 <Wheelspeed_and_DampPOTs+0x16>
		error(CAN_FIFO_NULL);
 8000bc0:	20a7      	movs	r0, #167	@ 0xa7
 8000bc2:	f7ff fd41 	bl	8000648 <error>
		uint16_t Wheel2=(RxData1[2]<<8)|RxData1[3];
		uint16_t DampPOTs1=(RxData1[4]<<8)|RxData1[5];
		uint16_t DampPOTs2=(RxData1[6]<<8)|RxData1[7];

	}
}
 8000bc6:	e032      	b.n	8000c2e <Wheelspeed_and_DampPOTs+0x7c>
		uint16_t Wheel1=(RxData1[0]<<8)|RxData1[1];
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	81fb      	strh	r3, [r7, #14]
		uint16_t Wheel2=(RxData1[2]<<8)|RxData1[3];
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3302      	adds	r3, #2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3303      	adds	r3, #3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	81bb      	strh	r3, [r7, #12]
		uint16_t DampPOTs1=(RxData1[4]<<8)|RxData1[5];
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	817b      	strh	r3, [r7, #10]
		uint16_t DampPOTs2=(RxData1[6]<<8)|RxData1[7];
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3306      	adds	r3, #6
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3307      	adds	r3, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	813b      	strh	r3, [r7, #8]
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <IMU>:
void IMU(uint8_t *RxData1){
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	if(RxData1==NULL){
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d103      	bne.n	8000c4c <IMU+0x16>
		error(CAN_FIFO_NULL);
 8000c44:	20a7      	movs	r0, #167	@ 0xa7
 8000c46:	f7ff fcff 	bl	8000648 <error>
		uint16_t roll=(RxData1[0]<<8)|RxData1[1];
		uint16_t yaw=(RxData1[2]<<8)|RxData1[3];
		uint16_t pitch=(RxData1[4]<<8)|RxData1[5];

	}
}
 8000c4a:	e025      	b.n	8000c98 <IMU+0x62>
		uint16_t roll=(RxData1[0]<<8)|RxData1[1];
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	81fb      	strh	r3, [r7, #14]
		uint16_t yaw=(RxData1[2]<<8)|RxData1[3];
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3302      	adds	r3, #2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3303      	adds	r3, #3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	81bb      	strh	r3, [r7, #12]
		uint16_t pitch=(RxData1[4]<<8)|RxData1[5];
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3304      	adds	r3, #4
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3305      	adds	r3, #5
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	817b      	strh	r3, [r7, #10]
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <IMU_coords>:
void IMU_coords(uint8_t *RxData1){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(RxData1==NULL){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <IMU_coords+0x16>
		error(CAN_FIFO_NULL);
 8000cae:	20a7      	movs	r0, #167	@ 0xa7
 8000cb0:	f7ff fcca 	bl	8000648 <error>
		uint16_t xcoord=(RxData1[0]<<8)|RxData1[1];
		uint16_t ycoord=(RxData1[2]<<8)|RxData1[3];
		uint16_t zcoord=(RxData1[4]<<8)|RxData1[5];

	}
}
 8000cb4:	e025      	b.n	8000d02 <IMU_coords+0x62>
		uint16_t xcoord=(RxData1[0]<<8)|RxData1[1];
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	81fb      	strh	r3, [r7, #14]
		uint16_t ycoord=(RxData1[2]<<8)|RxData1[3];
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3303      	adds	r3, #3
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	81bb      	strh	r3, [r7, #12]
		uint16_t zcoord=(RxData1[4]<<8)|RxData1[5];
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3304      	adds	r3, #4
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3305      	adds	r3, #5
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	817b      	strh	r3, [r7, #10]
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <MCprocess>:
void MCprocess(uint8_t *RxData){
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	if(RxData==NULL){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d103      	bne.n	8000d20 <MCprocess+0x16>
		error(CAN_FIFO_NULL);
 8000d18:	20a7      	movs	r0, #167	@ 0xa7
 8000d1a:	f7ff fc95 	bl	8000648 <error>
		return;
 8000d1e:	e04c      	b.n	8000dba <MCprocess+0xb0>
	}
	else{
		uint8_t regID=RxData[0];
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	75fb      	strb	r3, [r7, #23]
		switch(regID){
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	2bce      	cmp	r3, #206	@ 0xce
 8000d2a:	d018      	beq.n	8000d5e <MCprocess+0x54>
 8000d2c:	2bce      	cmp	r3, #206	@ 0xce
 8000d2e:	dc40      	bgt.n	8000db2 <MCprocess+0xa8>
 8000d30:	2bc6      	cmp	r3, #198	@ 0xc6
 8000d32:	d022      	beq.n	8000d7a <MCprocess+0x70>
 8000d34:	2bc6      	cmp	r3, #198	@ 0xc6
 8000d36:	dc3c      	bgt.n	8000db2 <MCprocess+0xa8>
 8000d38:	2b30      	cmp	r3, #48	@ 0x30
 8000d3a:	d002      	beq.n	8000d42 <MCprocess+0x38>
 8000d3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8000d3e:	d02a      	beq.n	8000d96 <MCprocess+0x8c>
 8000d40:	e037      	b.n	8000db2 <MCprocess+0xa8>
		case SPEED_ACTUAL:{
			uint16_t speed=(RxData[1]<<8)|RxData[2];
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3302      	adds	r3, #2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	81fb      	strh	r3, [r7, #14]
			break;
 8000d5c:	e02d      	b.n	8000dba <MCprocess+0xb0>
		}
		case SPEED_RPMMAX_INT:{
			uint16_t rpm=(RxData[1]<<8)|RxData[2];
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3301      	adds	r3, #1
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	82bb      	strh	r3, [r7, #20]
			break;
 8000d78:	e01f      	b.n	8000dba <MCprocess+0xb0>
		}

		case CURRENT_DEVICE_LOAD:{
				uint16_t CDL=(RxData[1]<<8)|RxData[2];
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	827b      	strh	r3, [r7, #18]
				break;
 8000d94:	e011      	b.n	8000dba <MCprocess+0xb0>
		}
		case POSITION_ACTUAL:{
				uint16_t posactual=(RxData[1]<<8)|RxData[2];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3302      	adds	r3, #2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	823b      	strh	r3, [r7, #16]
				break;
 8000db0:	e003      	b.n	8000dba <MCprocess+0xb0>
		}
		default:
			error(CAN_MC_FAIL);
 8000db2:	20a8      	movs	r0, #168	@ 0xa8
 8000db4:	f7ff fc48 	bl	8000648 <error>
			break;
 8000db8:	bf00      	nop

		}
	}
}
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <CANProcessIncomingMessage>:
void CANProcessIncomingMessage(FDCAN_RxHeaderTypeDef * header, uint8_t *RxData){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]

		switch(header->Identifier){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8000dd2:	d83e      	bhi.n	8000e52 <CANProcessIncomingMessage+0x92>
 8000dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000dd8:	d810      	bhi.n	8000dfc <CANProcessIncomingMessage+0x3c>
 8000dda:	f240 2202 	movw	r2, #514	@ 0x202
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d023      	beq.n	8000e2a <CANProcessIncomingMessage+0x6a>
 8000de2:	f240 2202 	movw	r2, #514	@ 0x202
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d833      	bhi.n	8000e52 <CANProcessIncomingMessage+0x92>
 8000dea:	f240 1201 	movw	r2, #257	@ 0x101
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d018      	beq.n	8000e24 <CANProcessIncomingMessage+0x64>
 8000df2:	f240 1281 	movw	r2, #385	@ 0x181
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d010      	beq.n	8000e1c <CANProcessIncomingMessage+0x5c>
 8000dfa:	e02a      	b.n	8000e52 <CANProcessIncomingMessage+0x92>
 8000dfc:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d826      	bhi.n	8000e52 <CANProcessIncomingMessage+0x92>
 8000e04:	a201      	add	r2, pc, #4	@ (adr r2, 8000e0c <CANProcessIncomingMessage+0x4c>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e33 	.word	0x08000e33
 8000e10:	08000e3b 	.word	0x08000e3b
 8000e14:	08000e43 	.word	0x08000e43
 8000e18:	08000e4b 	.word	0x08000e4b
			case 0x181: MCprocess(RxData);break;
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f7ff ff74 	bl	8000d0a <MCprocess>
 8000e22:	e01a      	b.n	8000e5a <CANProcessIncomingMessage+0x9a>
			case 0x101: PingPongRec();break;
 8000e24:	f7ff fe3e 	bl	8000aa4 <PingPongRec>
 8000e28:	e017      	b.n	8000e5a <CANProcessIncomingMessage+0x9a>
			case 0x202: APPS_and_BPr(RxData);break;
 8000e2a:	6838      	ldr	r0, [r7, #0]
 8000e2c:	f7ff fe4a 	bl	8000ac4 <APPS_and_BPr>
 8000e30:	e013      	b.n	8000e5a <CANProcessIncomingMessage+0x9a>
			case 0x301: LV_Voltage_Current_and_coolant(RxData);break;
 8000e32:	6838      	ldr	r0, [r7, #0]
 8000e34:	f7ff fe7b 	bl	8000b2e <LV_Voltage_Current_and_coolant>
 8000e38:	e00f      	b.n	8000e5a <CANProcessIncomingMessage+0x9a>
			case 0x302: Wheelspeed_and_DampPOTs(RxData);break;
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f7ff feb9 	bl	8000bb2 <Wheelspeed_and_DampPOTs>
 8000e40:	e00b      	b.n	8000e5a <CANProcessIncomingMessage+0x9a>
			case 0x303: IMU(RxData);break;
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f7ff fef7 	bl	8000c36 <IMU>
 8000e48:	e007      	b.n	8000e5a <CANProcessIncomingMessage+0x9a>
			case 0x304: IMU_coords(RxData);break;
 8000e4a:	6838      	ldr	r0, [r7, #0]
 8000e4c:	f7ff ff28 	bl	8000ca0 <IMU_coords>
 8000e50:	e003      	b.n	8000e5a <CANProcessIncomingMessage+0x9a>
			default: error(CAN_RECEPTION_FAIL);break;
 8000e52:	20a4      	movs	r0, #164	@ 0xa4
 8000e54:	f7ff fbf8 	bl	8000648 <error>
 8000e58:	bf00      	nop
		}

}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop

08000e64 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan,uint32_t BufferIndex){
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b08f      	sub	sp, #60	@ 0x3c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData0[8];

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData0) == HAL_OK) {
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	f107 0210 	add.w	r2, r7, #16
 8000e76:	2140      	movs	r1, #64	@ 0x40
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f001 f801 	bl	8001e80 <HAL_FDCAN_GetRxMessage>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d108      	bne.n	8000e96 <HAL_FDCAN_RxFifo0Callback+0x32>
	        CANProcessIncomingMessage(&RxHeader, RxData0);
 8000e84:	f107 0208 	add.w	r2, r7, #8
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff96 	bl	8000dc0 <CANProcessIncomingMessage>
	    } else {
	    	LOG((uint8_t*)rxFailure,strlen(rxFailure));
	    }
}
 8000e94:	e00e      	b.n	8000eb4 <HAL_FDCAN_RxFifo0Callback+0x50>
	    	LOG((uint8_t*)rxFailure,strlen(rxFailure));
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000e98:	681c      	ldr	r4, [r3, #0]
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fa34 	bl	800030c <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000eac:	4621      	mov	r1, r4
 8000eae:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000eb0:	f004 fdae 	bl	8005a10 <HAL_UART_Transmit>
}
 8000eb4:	bf00      	nop
 8000eb6:	373c      	adds	r7, #60	@ 0x3c
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	24000004 	.word	0x24000004
 8000ec0:	240000d4 	.word	0x240000d4

08000ec4 <HAL_FDCAN_RxFifo1Callback>:
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan,uint32_t BufferIndex){
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b08f      	sub	sp, #60	@ 0x3c
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData1[8];

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData1) == HAL_OK) {
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	f107 0210 	add.w	r2, r7, #16
 8000ed6:	2141      	movs	r1, #65	@ 0x41
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 ffd1 	bl	8001e80 <HAL_FDCAN_GetRxMessage>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <HAL_FDCAN_RxFifo1Callback+0x32>
		        CANProcessIncomingMessage(&RxHeader, RxData1);
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff66 	bl	8000dc0 <CANProcessIncomingMessage>
		    } else {
		    	LOG((uint8_t*)rxFailure,strlen(rxFailure));
		    }
}
 8000ef4:	e00e      	b.n	8000f14 <HAL_FDCAN_RxFifo1Callback+0x50>
		    	LOG((uint8_t*)rxFailure,strlen(rxFailure));
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <HAL_FDCAN_RxFifo1Callback+0x58>)
 8000ef8:	681c      	ldr	r4, [r3, #0]
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_FDCAN_RxFifo1Callback+0x58>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa04 	bl	800030c <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f0c:	4621      	mov	r1, r4
 8000f0e:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <HAL_FDCAN_RxFifo1Callback+0x5c>)
 8000f10:	f004 fd7e 	bl	8005a10 <HAL_UART_Transmit>
}
 8000f14:	bf00      	nop
 8000f16:	373c      	adds	r7, #60	@ 0x3c
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	24000004 	.word	0x24000004
 8000f20:	240000d4 	.word	0x240000d4

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f28:	f000 f954 	bl	80011d4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fb54 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f808 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 f924 	bl	8001180 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000f38:	f000 f872 	bl	8001020 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000f3c:	f000 f8d4 	bl	80010e8 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <main+0x1c>

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09c      	sub	sp, #112	@ 0x70
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	224c      	movs	r2, #76	@ 0x4c
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 ff7a 	bl	8006e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 ff74 	bl	8006e4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f64:	2002      	movs	r0, #2
 8000f66:	f001 ffa1 	bl	8002eac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <SystemClock_Config+0xd8>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a2a      	ldr	r2, [pc, #168]	@ (800101c <SystemClock_Config+0xd8>)
 8000f74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b28      	ldr	r3, [pc, #160]	@ (800101c <SystemClock_Config+0xd8>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f86:	bf00      	nop
 8000f88:	4b24      	ldr	r3, [pc, #144]	@ (800101c <SystemClock_Config+0xd8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f94:	d1f8      	bne.n	8000f88 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000fac:	2310      	movs	r3, #16
 8000fae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 ffa7 	bl	8002f20 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd8:	f000 f928 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	233f      	movs	r3, #63	@ 0x3f
 8000fde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fec:	2340      	movs	r3, #64	@ 0x40
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ffa:	2340      	movs	r3, #64	@ 0x40
 8000ffc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fb66 	bl	80036d4 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800100e:	f000 f90d 	bl	800122c <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3770      	adds	r7, #112	@ 0x70
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	58024800 	.word	0x58024800

08001020 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001024:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001026:	4a2f      	ldr	r2, [pc, #188]	@ (80010e4 <MX_FDCAN1_Init+0xc4>)
 8001028:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800102a:	4b2d      	ldr	r3, [pc, #180]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001030:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001036:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001042:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800104a:	2228      	movs	r2, #40	@ 0x28
 800104c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001050:	2201      	movs	r2, #1
 8001052:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001056:	2202      	movs	r2, #2
 8001058:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800105a:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800105c:	2202      	movs	r2, #2
 800105e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001062:	2201      	movs	r2, #1
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001068:	2201      	movs	r2, #1
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800106e:	2202      	movs	r2, #2
 8001070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001074:	2202      	movs	r2, #2
 8001076:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001080:	2200      	movs	r2, #0
 8001082:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001084:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001086:	2200      	movs	r2, #0
 8001088:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800108c:	2200      	movs	r2, #0
 800108e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001092:	2204      	movs	r2, #4
 8001094:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 8001098:	2200      	movs	r2, #0
 800109a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 800109e:	2204      	movs	r2, #4
 80010a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_FDCAN1_Init+0xc0>)
 80010ce:	f000 fc9d 	bl	8001a0c <HAL_FDCAN_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80010d8:	f000 f8a8 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24000034 	.word	0x24000034
 80010e4:	4000a000 	.word	0x4000a000

080010e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010ec:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <MX_UART4_Init+0x90>)
 80010ee:	4a23      	ldr	r2, [pc, #140]	@ (800117c <MX_UART4_Init+0x94>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010f2:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <MX_UART4_Init+0x90>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <MX_UART4_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <MX_UART4_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <MX_UART4_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_UART4_Init+0x90>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <MX_UART4_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_UART4_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_UART4_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_UART4_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_UART4_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001130:	4811      	ldr	r0, [pc, #68]	@ (8001178 <MX_UART4_Init+0x90>)
 8001132:	f004 fc1d 	bl	8005970 <HAL_UART_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800113c:	f000 f876 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <MX_UART4_Init+0x90>)
 8001144:	f005 fdb7 	bl	8006cb6 <HAL_UARTEx_SetTxFifoThreshold>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800114e:	f000 f86d 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4808      	ldr	r0, [pc, #32]	@ (8001178 <MX_UART4_Init+0x90>)
 8001156:	f005 fdec 	bl	8006d32 <HAL_UARTEx_SetRxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001160:	f000 f864 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <MX_UART4_Init+0x90>)
 8001166:	f005 fd6d 	bl	8006c44 <HAL_UARTEx_DisableFifoMode>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001170:	f000 f85c 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	240000d4 	.word	0x240000d4
 800117c:	40004c00 	.word	0x40004c00

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_GPIO_Init+0x50>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118c:	4a10      	ldr	r2, [pc, #64]	@ (80011d0 <MX_GPIO_Init+0x50>)
 800118e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_GPIO_Init+0x50>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <MX_GPIO_Init+0x50>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <MX_GPIO_Init+0x50>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_GPIO_Init+0x50>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	58024400 	.word	0x58024400

080011d4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011e6:	f000 fb99 	bl	800191c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011ea:	2301      	movs	r3, #1
 80011ec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011f6:	231f      	movs	r3, #31
 80011f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011fa:	2387      	movs	r3, #135	@ 0x87
 80011fc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011fe:	2300      	movs	r3, #0
 8001200:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001202:	2300      	movs	r3, #0
 8001204:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001206:	2301      	movs	r3, #1
 8001208:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800120a:	2301      	movs	r3, #1
 800120c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001216:	463b      	mov	r3, r7
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fbb7 	bl	800198c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fb94 	bl	800194c <HAL_MPU_Enable>

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_MspInit+0x30>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001244:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <HAL_MspInit+0x30>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_MspInit+0x30>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	58024400 	.word	0x58024400

0800126c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0b8      	sub	sp, #224	@ 0xe0
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	22b8      	movs	r2, #184	@ 0xb8
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fddd 	bl	8006e4c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <HAL_FDCAN_MspInit+0xd8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d14e      	bne.n	800133a <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800129c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80012a8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80012ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fd9a 	bl	8003dec <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80012be:	f7ff ffb5 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_FDCAN_MspInit+0xdc>)
 80012c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001348 <HAL_FDCAN_MspInit+0xdc>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ce:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <HAL_FDCAN_MspInit+0xdc>)
 80012d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80012d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_FDCAN_MspInit+0xdc>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e6:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <HAL_FDCAN_MspInit+0xdc>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_FDCAN_MspInit+0xdc>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001302:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001318:	2309      	movs	r3, #9
 800131a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001322:	4619      	mov	r1, r3
 8001324:	4809      	ldr	r0, [pc, #36]	@ (800134c <HAL_FDCAN_MspInit+0xe0>)
 8001326:	f001 fc19 	bl	8002b5c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2013      	movs	r0, #19
 8001330:	f000 fabf 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001334:	2013      	movs	r0, #19
 8001336:	f000 fad6 	bl	80018e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	37e0      	adds	r7, #224	@ 0xe0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	4000a000 	.word	0x4000a000
 8001348:	58024400 	.word	0x58024400
 800134c:	58020000 	.word	0x58020000

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b8      	sub	sp, #224	@ 0xe0
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	22b8      	movs	r2, #184	@ 0xb8
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f005 fd6b 	bl	8006e4c <memset>
  if(huart->Instance==UART4)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <HAL_UART_MspInit+0xc4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d145      	bne.n	800140c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001380:	f04f 0202 	mov.w	r2, #2
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fd28 	bl	8003dec <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013a2:	f7ff ff43 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <HAL_UART_MspInit+0xc8>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001418 <HAL_UART_MspInit+0xc8>)
 80013ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <HAL_UART_MspInit+0xc8>)
 80013b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <HAL_UART_MspInit+0xc8>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ca:	4a13      	ldr	r2, [pc, #76]	@ (8001418 <HAL_UART_MspInit+0xc8>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <HAL_UART_MspInit+0xc8>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013fa:	2308      	movs	r3, #8
 80013fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <HAL_UART_MspInit+0xcc>)
 8001408:	f001 fba8 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800140c:	bf00      	nop
 800140e:	37e0      	adds	r7, #224	@ 0xe0
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40004c00 	.word	0x40004c00
 8001418:	58024400 	.word	0x58024400
 800141c:	58020000 	.word	0x58020000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <NMI_Handler+0x4>

08001428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <MemManage_Handler+0x4>

08001438 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <UsageFault_Handler+0x4>

08001448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001476:	f000 f921 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <FDCAN1_IT0_IRQHandler+0x10>)
 8001486:	f000 fe67 	bl	8002158 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	24000034 	.word	0x24000034

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <SystemInit+0xd0>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149e:	4a31      	ldr	r2, [pc, #196]	@ (8001564 <SystemInit+0xd0>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <SystemInit+0xd4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d807      	bhi.n	80014c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <SystemInit+0xd4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 030f 	bic.w	r3, r3, #15
 80014bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <SystemInit+0xd4>)
 80014be:	f043 0307 	orr.w	r3, r3, #7
 80014c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <SystemInit+0xd8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a28      	ldr	r2, [pc, #160]	@ (800156c <SystemInit+0xd8>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d0:	4b26      	ldr	r3, [pc, #152]	@ (800156c <SystemInit+0xd8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014d6:	4b25      	ldr	r3, [pc, #148]	@ (800156c <SystemInit+0xd8>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4924      	ldr	r1, [pc, #144]	@ (800156c <SystemInit+0xd8>)
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <SystemInit+0xdc>)
 80014de:	4013      	ands	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <SystemInit+0xd4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <SystemInit+0xd4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 030f 	bic.w	r3, r3, #15
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <SystemInit+0xd4>)
 80014f8:	f043 0307 	orr.w	r3, r3, #7
 80014fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <SystemInit+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <SystemInit+0xd8>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <SystemInit+0xd8>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <SystemInit+0xd8>)
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <SystemInit+0xe0>)
 8001514:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <SystemInit+0xd8>)
 8001518:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <SystemInit+0xe4>)
 800151a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <SystemInit+0xd8>)
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <SystemInit+0xe8>)
 8001520:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <SystemInit+0xd8>)
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <SystemInit+0xe8>)
 800152c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <SystemInit+0xd8>)
 8001530:	2200      	movs	r2, #0
 8001532:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <SystemInit+0xd8>)
 8001536:	4a11      	ldr	r2, [pc, #68]	@ (800157c <SystemInit+0xe8>)
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <SystemInit+0xd8>)
 800153c:	2200      	movs	r2, #0
 800153e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <SystemInit+0xd8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <SystemInit+0xd8>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <SystemInit+0xd8>)
 800154e:	2200      	movs	r2, #0
 8001550:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <SystemInit+0xec>)
 8001554:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001558:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	52002000 	.word	0x52002000
 800156c:	58024400 	.word	0x58024400
 8001570:	eaf6ed7f 	.word	0xeaf6ed7f
 8001574:	02020200 	.word	0x02020200
 8001578:	01ff0000 	.word	0x01ff0000
 800157c:	01010280 	.word	0x01010280
 8001580:	52004000 	.word	0x52004000

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001588:	f7ff ff84 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f005 fc53 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fcb5 	bl	8000f24 <main>
  bx  lr
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015c4:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 80015c8:	080072c4 	.word	0x080072c4
  ldr r2, =_sbss
 80015cc:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 80015d0:	2400016c 	.word	0x2400016c

080015d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC3_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015de:	2003      	movs	r0, #3
 80015e0:	f000 f95c 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015e4:	f002 fa2c 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_Init+0x68>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	4913      	ldr	r1, [pc, #76]	@ (8001644 <HAL_Init+0x6c>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <HAL_Init+0x68>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	4a0e      	ldr	r2, [pc, #56]	@ (8001644 <HAL_Init+0x6c>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_Init+0x70>)
 800161a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_Init+0x74>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001622:	200f      	movs	r0, #15
 8001624:	f000 f814 	bl	8001650 <HAL_InitTick>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e002      	b.n	8001638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001632:	f7ff fe01 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58024400 	.word	0x58024400
 8001644:	0800726c 	.word	0x0800726c
 8001648:	2400000c 	.word	0x2400000c
 800164c:	24000008 	.word	0x24000008

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_InitTick+0x60>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e021      	b.n	80016a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_InitTick+0x64>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_InitTick+0x60>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f941 	bl	8001902 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f90b 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_InitTick+0x68>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	24000014 	.word	0x24000014
 80016b4:	24000008 	.word	0x24000008
 80016b8:	24000010 	.word	0x24000010

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	24000014 	.word	0x24000014
 80016e0:	24000168 	.word	0x24000168

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	24000168 	.word	0x24000168

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <__NVIC_SetPriorityGrouping+0x40>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	4313      	orrs	r3, r2
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	@ (800173c <__NVIC_SetPriorityGrouping+0x40>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	05fa0000 	.word	0x05fa0000

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4907      	ldr	r1, [pc, #28]	@ (8001798 <__NVIC_EnableIRQ+0x38>)
 800177a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	@ (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	@ 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	@ 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff29 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff40 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff33 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa4 	bl	8001858 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001920:	f3bf 8f5f 	dmb	sy
}
 8001924:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <HAL_MPU_Disable+0x28>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <HAL_MPU_Disable+0x28>)
 800192c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001930:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_MPU_Disable+0x2c>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	e000ed90 	.word	0xe000ed90

0800194c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001954:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <HAL_MPU_Enable+0x38>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_MPU_Enable+0x3c>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	4a09      	ldr	r2, [pc, #36]	@ (8001988 <HAL_MPU_Enable+0x3c>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800196a:	f3bf 8f4f 	dsb	sy
}
 800196e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001970:	f3bf 8f6f 	isb	sy
}
 8001974:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed90 	.word	0xe000ed90
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	785a      	ldrb	r2, [r3, #1]
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_MPU_ConfigRegion+0x7c>)
 800199a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_MPU_ConfigRegion+0x7c>)
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_MPU_ConfigRegion+0x7c>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019a8:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <HAL_MPU_ConfigRegion+0x7c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7b1b      	ldrb	r3, [r3, #12]
 80019b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7adb      	ldrb	r3, [r3, #11]
 80019ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7a9b      	ldrb	r3, [r3, #10]
 80019c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7b5b      	ldrb	r3, [r3, #13]
 80019ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b9b      	ldrb	r3, [r3, #14]
 80019d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7bdb      	ldrb	r3, [r3, #15]
 80019da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7a5b      	ldrb	r3, [r3, #9]
 80019e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7a1b      	ldrb	r3, [r3, #8]
 80019ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019f8:	6113      	str	r3, [r2, #16]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed90 	.word	0xe000ed90

08001a0c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b098      	sub	sp, #96	@ 0x60
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001a14:	4a84      	ldr	r2, [pc, #528]	@ (8001c28 <HAL_FDCAN_Init+0x21c>)
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	224c      	movs	r2, #76	@ 0x4c
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f005 fa40 	bl	8006ea4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1c6      	b.n	8001dbc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7e      	ldr	r2, [pc, #504]	@ (8001c2c <HAL_FDCAN_Init+0x220>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d106      	bne.n	8001a46 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fc06 	bl	800126c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0210 	bic.w	r2, r2, #16
 8001a6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a70:	f7ff fe38 	bl	80016e4 <HAL_GetTick>
 8001a74:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a76:	e014      	b.n	8001aa2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a78:	f7ff fe34 	bl	80016e4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d90d      	bls.n	8001aa2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e18c      	b.n	8001dbc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d0e3      	beq.n	8001a78 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac0:	f7ff fe10 	bl	80016e4 <HAL_GetTick>
 8001ac4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ac6:	e014      	b.n	8001af2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ac8:	f7ff fe0c 	bl	80016e4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b0a      	cmp	r3, #10
 8001ad4:	d90d      	bls.n	8001af2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e164      	b.n	8001dbc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0e3      	beq.n	8001ac8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0202 	orr.w	r2, r2, #2
 8001b0e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7c1b      	ldrb	r3, [r3, #16]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d108      	bne.n	8001b2a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b26:	619a      	str	r2, [r3, #24]
 8001b28:	e007      	b.n	8001b3a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b38:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7c5b      	ldrb	r3, [r3, #17]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	e007      	b.n	8001b64 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b62:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7c9b      	ldrb	r3, [r3, #18]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d108      	bne.n	8001b7e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b7a:	619a      	str	r2, [r3, #24]
 8001b7c:	e007      	b.n	8001b8e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b8c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699a      	ldr	r2, [r3, #24]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001bb2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0210 	bic.w	r2, r2, #16
 8001bc2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0204 	orr.w	r2, r2, #4
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	e030      	b.n	8001c40 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d02c      	beq.n	8001c40 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d020      	beq.n	8001c30 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bfc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0210 	orr.w	r2, r2, #16
 8001c0c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d114      	bne.n	8001c40 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0220 	orr.w	r2, r2, #32
 8001c24:	619a      	str	r2, [r3, #24]
 8001c26:	e00b      	b.n	8001c40 <HAL_FDCAN_Init+0x234>
 8001c28:	08007220 	.word	0x08007220
 8001c2c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c50:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c58:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c68:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c6a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001c74:	d115      	bne.n	8001ca2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	3b01      	subs	r3, #1
 8001c82:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c84:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c8e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	3b01      	subs	r3, #1
 8001c98:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c9e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001ca0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc8:	4413      	add	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d011      	beq.n	8001cf2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001cd6:	f023 0107 	bic.w	r1, r3, #7
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3360      	adds	r3, #96	@ 0x60
 8001ce2:	443b      	add	r3, r7
 8001ce4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d011      	beq.n	8001d1e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001d02:	f023 0107 	bic.w	r1, r3, #7
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3360      	adds	r3, #96	@ 0x60
 8001d0e:	443b      	add	r3, r7
 8001d10:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001d2e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	3360      	adds	r3, #96	@ 0x60
 8001d3a:	443b      	add	r3, r7
 8001d3c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001d40:	011a      	lsls	r2, r3, #4
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001d5c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	3360      	adds	r3, #96	@ 0x60
 8001d68:	443b      	add	r3, r7
 8001d6a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001d6e:	021a      	lsls	r2, r3, #8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_FDCAN_Init+0x3b8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d107      	bne.n	8001d94 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f022 0203 	bic.w	r2, r2, #3
 8001d92:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fcd1 	bl	8002754 <FDCAN_CalcultateRamBlockAddresses>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001db8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3760      	adds	r7, #96	@ 0x60
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	4000a000 	.word	0x4000a000

08001dc8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d141      	bne.n	8001e64 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001de8:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001df6:	f043 0220 	orr.w	r2, r3, #32
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e038      	b.n	8001e76 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e1a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e026      	b.n	8001e76 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fe0e 	bl	8002a60 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001e54:	2201      	movs	r2, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e008      	b.n	8001e76 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e6a:	f043 0208 	orr.w	r2, r3, #8
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	@ 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001e98:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001e9a:	7efb      	ldrb	r3, [r7, #27]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	f040 8149 	bne.w	8002134 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b40      	cmp	r3, #64	@ 0x40
 8001ea6:	d14c      	bne.n	8001f42 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001eb0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e13c      	b.n	8002146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ee2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e12a      	b.n	8002146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f00:	d10a      	bne.n	8001f18 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f12:	d101      	bne.n	8001f18 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001f14:	2301      	movs	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	69f9      	ldr	r1, [r7, #28]
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f40:	e068      	b.n	8002014 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b41      	cmp	r3, #65	@ 0x41
 8001f46:	d14c      	bne.n	8001fe2 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f50:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0ec      	b.n	8002146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0da      	b.n	8002146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001faa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001fae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fb2:	d101      	bne.n	8001fb8 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd4:	69f9      	ldr	r1, [r7, #28]
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe0:	e018      	b.n	8002014 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d309      	bcc.n	8002000 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0a2      	b.n	8002146 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0c9b      	lsrs	r3, r3, #18
 800202e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e005      	b.n	8002044 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	3304      	adds	r3, #4
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0e1b      	lsrs	r3, r3, #24
 8002098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0fda      	lsrs	r2, r3, #31
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	3304      	adds	r3, #4
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	e00a      	b.n	80020d0 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	441a      	add	r2, r3
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	440b      	add	r3, r1
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	3301      	adds	r3, #1
 80020ce:	623b      	str	r3, [r7, #32]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002154 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	461a      	mov	r2, r3
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d3ec      	bcc.n	80020ba <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b40      	cmp	r3, #64	@ 0x40
 80020e4:	d105      	bne.n	80020f2 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80020f0:	e01e      	b.n	8002130 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b41      	cmp	r3, #65	@ 0x41
 80020f6:	d105      	bne.n	8002104 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8002102:	e015      	b.n	8002130 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b1f      	cmp	r3, #31
 8002108:	d808      	bhi.n	800211c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800211a:	e009      	b.n	8002130 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 021f 	and.w	r2, r3, #31
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e008      	b.n	8002146 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800213a:	f043 0208 	orr.w	r2, r3, #8
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	372c      	adds	r7, #44	@ 0x2c
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	0800727c 	.word	0x0800727c

08002158 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b096      	sub	sp, #88	@ 0x58
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002160:	4b9a      	ldr	r3, [pc, #616]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	079b      	lsls	r3, r3, #30
 8002166:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002168:	4b98      	ldr	r3, [pc, #608]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	079b      	lsls	r3, r3, #30
 800216e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002170:	4013      	ands	r3, r2
 8002172:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800217e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002188:	4013      	ands	r3, r2
 800218a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021a0:	4013      	ands	r3, r2
 80021a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021b8:	4013      	ands	r3, r2
 80021ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80021c6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021d0:	4013      	ands	r3, r2
 80021d2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021da:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80021de:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021e8:	4013      	ands	r3, r2
 80021ea:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80021fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d010      	beq.n	800222a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800221c:	651a      	str	r2, [r3, #80]	@ 0x50
 800221e:	4b6b      	ldr	r3, [pc, #428]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa49 	bl	80026bc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800222a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800222c:	0a9b      	lsrs	r3, r3, #10
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01d      	beq.n	8002272 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	0a9b      	lsrs	r3, r3, #10
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d017      	beq.n	8002272 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800224a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002256:	4013      	ands	r3, r2
 8002258:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002262:	651a      	str	r2, [r3, #80]	@ 0x50
 8002264:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800226a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f9fc 	bl	800266a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00d      	beq.n	8002294 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800227e:	4b54      	ldr	r3, [pc, #336]	@ (80023d0 <HAL_FDCAN_IRQHandler+0x278>)
 8002280:	400b      	ands	r3, r1
 8002282:	6513      	str	r3, [r2, #80]	@ 0x50
 8002284:	4a51      	ldr	r2, [pc, #324]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 8002286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002288:	0f9b      	lsrs	r3, r3, #30
 800228a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800228c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9c0 	bl	8002614 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80022a0:	4b4b      	ldr	r3, [pc, #300]	@ (80023d0 <HAL_FDCAN_IRQHandler+0x278>)
 80022a2:	400b      	ands	r3, r1
 80022a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80022a6:	4a49      	ldr	r2, [pc, #292]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 80022a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022aa:	0f9b      	lsrs	r3, r3, #30
 80022ac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80022ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9ba 	bl	800262a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80022b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80022c2:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <HAL_FDCAN_IRQHandler+0x278>)
 80022c4:	400b      	ands	r3, r1
 80022c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80022c8:	4a40      	ldr	r2, [pc, #256]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 80022ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022cc:	0f9b      	lsrs	r3, r3, #30
 80022ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80022d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fdc6 	bl	8000e64 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80022d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80022e4:	4b3a      	ldr	r3, [pc, #232]	@ (80023d0 <HAL_FDCAN_IRQHandler+0x278>)
 80022e6:	400b      	ands	r3, r1
 80022e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80022ea:	4a38      	ldr	r2, [pc, #224]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 80022ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ee:	0f9b      	lsrs	r3, r3, #30
 80022f0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80022f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7fe fde5 	bl	8000ec4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80022fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fc:	0adb      	lsrs	r3, r3, #11
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002308:	0adb      	lsrs	r3, r3, #11
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800231a:	651a      	str	r2, [r3, #80]	@ 0x50
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f98c 	bl	8002640 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232a:	0a5b      	lsrs	r3, r3, #9
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01d      	beq.n	8002370 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002336:	0a5b      	lsrs	r3, r3, #9
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002348:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002354:	4013      	ands	r3, r2
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002360:	651a      	str	r2, [r3, #80]	@ 0x50
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f972 	bl	8002654 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002372:	0cdb      	lsrs	r3, r3, #19
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237e:	0cdb      	lsrs	r3, r3, #19
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002390:	651a      	str	r2, [r3, #80]	@ 0x50
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f971 	bl	8002680 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800239e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80023aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023be:	651a      	str	r2, [r3, #80]	@ 0x50
 80023c0:	4b02      	ldr	r3, [pc, #8]	@ (80023cc <HAL_FDCAN_IRQHandler+0x274>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	e004      	b.n	80023d4 <HAL_FDCAN_IRQHandler+0x27c>
 80023ca:	bf00      	nop
 80023cc:	4000a800 	.word	0x4000a800
 80023d0:	3fcfffff 	.word	0x3fcfffff
 80023d4:	f000 f95e 	bl	8002694 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80023d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023da:	0c9b      	lsrs	r3, r3, #18
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	0c9b      	lsrs	r3, r3, #18
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80023f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80023fa:	4b83      	ldr	r3, [pc, #524]	@ (8002608 <HAL_FDCAN_IRQHandler+0x4b0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f951 	bl	80026a8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002408:	0c5b      	lsrs	r3, r3, #17
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	0c5b      	lsrs	r3, r3, #17
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00f      	beq.n	800243e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002426:	651a      	str	r2, [r3, #80]	@ 0x50
 8002428:	4b77      	ldr	r3, [pc, #476]	@ (8002608 <HAL_FDCAN_IRQHandler+0x4b0>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002434:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800243e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800244a:	4b70      	ldr	r3, [pc, #448]	@ (800260c <HAL_FDCAN_IRQHandler+0x4b4>)
 800244c:	400b      	ands	r3, r1
 800244e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002450:	4a6d      	ldr	r2, [pc, #436]	@ (8002608 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002454:	0f9b      	lsrs	r3, r3, #30
 8002456:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f942 	bl	80026e4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002462:	2b00      	cmp	r3, #0
 8002464:	d011      	beq.n	800248a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800246c:	4b67      	ldr	r3, [pc, #412]	@ (800260c <HAL_FDCAN_IRQHandler+0x4b4>)
 800246e:	400b      	ands	r3, r1
 8002470:	6513      	str	r3, [r2, #80]	@ 0x50
 8002472:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002476:	0f9b      	lsrs	r3, r3, #30
 8002478:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a60      	ldr	r2, [pc, #384]	@ (8002610 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	f040 80ac 	bne.w	80025ee <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a4 	beq.w	80025ee <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ba:	4013      	ands	r3, r2
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024d2:	4013      	ands	r3, r2
 80024d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	4013      	ands	r3, r2
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80024f8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	4013      	ands	r3, r2
 8002504:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8002510:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	4013      	ands	r3, r2
 800251c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800252e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800253a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800253c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8db 	bl	80026fa <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002550:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8db 	bl	8002710 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01a      	beq.n	800259c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d014      	beq.n	800259c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	b29b      	uxth	r3, r3
 800257c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002588:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2240      	movs	r2, #64	@ 0x40
 8002590:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6939      	ldr	r1, [r7, #16]
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8c5 	bl	8002726 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80025aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f8c6 	bl	800273e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	6a3a      	ldr	r2, [r7, #32]
 80025be:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f869 	bl	80026d0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80025fe:	bf00      	nop
 8002600:	3758      	adds	r7, #88	@ 0x58
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	4000a800 	.word	0x4000a800
 800260c:	3fcfffff 	.word	0x3fcfffff
 8002610:	4000a000 	.word	0x4000a000

08002614 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800276a:	4ba7      	ldr	r3, [pc, #668]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800276c:	4013      	ands	r3, r2
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	0091      	lsls	r1, r2, #2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	430b      	orrs	r3, r1
 8002778:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002784:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	4413      	add	r3, r2
 80027a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027aa:	4b97      	ldr	r3, [pc, #604]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	0091      	lsls	r1, r2, #2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	4413      	add	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80027ec:	4b86      	ldr	r3, [pc, #536]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	0091      	lsls	r1, r2, #2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002806:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	041a      	lsls	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	4413      	add	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002834:	4b74      	ldr	r3, [pc, #464]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002836:	4013      	ands	r3, r2
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	0091      	lsls	r1, r2, #2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800284e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002856:	041a      	lsls	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4413      	add	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800287c:	4b62      	ldr	r3, [pc, #392]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800287e:	4013      	ands	r3, r2
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	0091      	lsls	r1, r2, #2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4413      	add	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80028a8:	4b57      	ldr	r3, [pc, #348]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	0091      	lsls	r1, r2, #2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	430b      	orrs	r3, r1
 80028b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	041a      	lsls	r2, r3, #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	4413      	add	r3, r2
 80028e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	0091      	lsls	r1, r2, #2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	430b      	orrs	r3, r1
 80028f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002904:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002920:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002928:	061a      	lsls	r2, r3, #24
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002938:	4b34      	ldr	r3, [pc, #208]	@ (8002a0c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800293a:	4413      	add	r3, r2
 800293c:	009a      	lsls	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	441a      	add	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002974:	441a      	add	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800298c:	441a      	add	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80029a4:	441a      	add	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	441a      	add	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d915      	bls.n	8002a30 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002a04:	e006      	b.n	8002a14 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002a06:	bf00      	nop
 8002a08:	ffff0003 	.word	0xffff0003
 8002a0c:	10002b00 	.word	0x10002b00
 8002a10:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e010      	b.n	8002a52 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e005      	b.n	8002a44 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3304      	adds	r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3f3      	bcc.n	8002a38 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	@ 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002a7e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e00a      	b.n	8002aa2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002a94:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002a9a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002aa0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002aac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002ab2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002ab8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ace:	6839      	ldr	r1, [r7, #0]
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	3304      	adds	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e020      	b.n	8002b3a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3303      	adds	r3, #3
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3302      	adds	r3, #2
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	440b      	add	r3, r1
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b10:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	440b      	add	r3, r1
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b1e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	440a      	add	r2, r1
 8002b26:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b28:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	3304      	adds	r3, #4
 8002b32:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3304      	adds	r3, #4
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4a06      	ldr	r2, [pc, #24]	@ (8002b58 <FDCAN_CopyMessageToRAM+0xf8>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	461a      	mov	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d3d6      	bcc.n	8002af8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	3724      	adds	r7, #36	@ 0x24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	0800727c 	.word	0x0800727c

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	@ 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b6a:	4b86      	ldr	r3, [pc, #536]	@ (8002d84 <HAL_GPIO_Init+0x228>)
 8002b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b6e:	e18c      	b.n	8002e8a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 817e 	beq.w	8002e84 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d005      	beq.n	8002ba0 <HAL_GPIO_Init+0x44>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d130      	bne.n	8002c02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 0201 	and.w	r2, r3, #1
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d017      	beq.n	8002c3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d123      	bne.n	8002c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0203 	and.w	r2, r3, #3
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80d8 	beq.w	8002e84 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d88 <HAL_GPIO_Init+0x22c>)
 8002cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cda:	4a2b      	ldr	r2, [pc, #172]	@ (8002d88 <HAL_GPIO_Init+0x22c>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ce4:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <HAL_GPIO_Init+0x22c>)
 8002ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf2:	4a26      	ldr	r2, [pc, #152]	@ (8002d8c <HAL_GPIO_Init+0x230>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <HAL_GPIO_Init+0x234>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d04a      	beq.n	8002db4 <HAL_GPIO_Init+0x258>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	@ (8002d94 <HAL_GPIO_Init+0x238>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d02b      	beq.n	8002d7e <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1b      	ldr	r2, [pc, #108]	@ (8002d98 <HAL_GPIO_Init+0x23c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d025      	beq.n	8002d7a <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1a      	ldr	r2, [pc, #104]	@ (8002d9c <HAL_GPIO_Init+0x240>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01f      	beq.n	8002d76 <HAL_GPIO_Init+0x21a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a19      	ldr	r2, [pc, #100]	@ (8002da0 <HAL_GPIO_Init+0x244>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d019      	beq.n	8002d72 <HAL_GPIO_Init+0x216>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <HAL_GPIO_Init+0x248>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0x212>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <HAL_GPIO_Init+0x24c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00d      	beq.n	8002d6a <HAL_GPIO_Init+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <HAL_GPIO_Init+0x250>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <HAL_GPIO_Init+0x20a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <HAL_GPIO_Init+0x254>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d5e:	2309      	movs	r3, #9
 8002d60:	e029      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d62:	230a      	movs	r3, #10
 8002d64:	e027      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e025      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	e023      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d6e:	2305      	movs	r3, #5
 8002d70:	e021      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d72:	2304      	movs	r3, #4
 8002d74:	e01f      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d76:	2303      	movs	r3, #3
 8002d78:	e01d      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e01b      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e019      	b.n	8002db6 <HAL_GPIO_Init+0x25a>
 8002d82:	bf00      	nop
 8002d84:	58000080 	.word	0x58000080
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	58000400 	.word	0x58000400
 8002d90:	58020000 	.word	0x58020000
 8002d94:	58020400 	.word	0x58020400
 8002d98:	58020800 	.word	0x58020800
 8002d9c:	58020c00 	.word	0x58020c00
 8002da0:	58021000 	.word	0x58021000
 8002da4:	58021400 	.word	0x58021400
 8002da8:	58021800 	.word	0x58021800
 8002dac:	58021c00 	.word	0x58021c00
 8002db0:	58022400 	.word	0x58022400
 8002db4:	2300      	movs	r3, #0
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f002 0203 	and.w	r2, r2, #3
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	4093      	lsls	r3, r2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc6:	4938      	ldr	r1, [pc, #224]	@ (8002ea8 <HAL_GPIO_Init+0x34c>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f ae6b 	bne.w	8002b70 <HAL_GPIO_Init+0x14>
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	3724      	adds	r7, #36	@ 0x24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	58000400 	.word	0x58000400

08002eac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002eb4:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <HAL_PWREx_ConfigSupply+0x70>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ec0:	4b16      	ldr	r3, [pc, #88]	@ (8002f1c <HAL_PWREx_ConfigSupply+0x70>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01f      	b.n	8002f12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e01d      	b.n	8002f12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ed6:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_PWREx_ConfigSupply+0x70>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	490f      	ldr	r1, [pc, #60]	@ (8002f1c <HAL_PWREx_ConfigSupply+0x70>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ee6:	f7fe fbfd 	bl	80016e4 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002eec:	e009      	b.n	8002f02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002eee:	f7fe fbf9 	bl	80016e4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002efc:	d901      	bls.n	8002f02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e007      	b.n	8002f12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_PWREx_ConfigSupply+0x70>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0e:	d1ee      	bne.n	8002eee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	58024800 	.word	0x58024800

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	@ 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e3c8      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8087 	beq.w	800304e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f40:	4b88      	ldr	r3, [pc, #544]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f4a:	4b86      	ldr	r3, [pc, #536]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d007      	beq.n	8002f66 <HAL_RCC_OscConfig+0x46>
 8002f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f58:	2b18      	cmp	r3, #24
 8002f5a:	d110      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
 8002f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d10b      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f66:	4b7f      	ldr	r3, [pc, #508]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d06c      	beq.n	800304c <HAL_RCC_OscConfig+0x12c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d168      	bne.n	800304c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e3a2      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x76>
 8002f88:	4b76      	ldr	r3, [pc, #472]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a75      	ldr	r2, [pc, #468]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e02e      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x98>
 8002f9e:	4b71      	ldr	r3, [pc, #452]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a70      	ldr	r2, [pc, #448]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b6e      	ldr	r3, [pc, #440]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6d      	ldr	r2, [pc, #436]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0xbc>
 8002fc2:	4b68      	ldr	r3, [pc, #416]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a67      	ldr	r2, [pc, #412]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b65      	ldr	r3, [pc, #404]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a64      	ldr	r2, [pc, #400]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fdc:	4b61      	ldr	r3, [pc, #388]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a60      	ldr	r2, [pc, #384]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5d      	ldr	r2, [pc, #372]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fb72 	bl	80016e4 <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe fb6e 	bl	80016e4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	@ 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e356      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003016:	4b53      	ldr	r3, [pc, #332]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xe4>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fb5e 	bl	80016e4 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe fb5a 	bl	80016e4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	@ 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e342      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800303e:	4b49      	ldr	r3, [pc, #292]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x10c>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 808c 	beq.w	8003174 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305c:	4b41      	ldr	r3, [pc, #260]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003064:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003066:	4b3f      	ldr	r3, [pc, #252]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_RCC_OscConfig+0x162>
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b18      	cmp	r3, #24
 8003076:	d137      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1c8>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d132      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003082:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x17a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e314      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800309a:	4b32      	ldr	r3, [pc, #200]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 0219 	bic.w	r2, r3, #25
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	492f      	ldr	r1, [pc, #188]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fb1a 	bl	80016e4 <HAL_GetTick>
 80030b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fe fb16 	bl	80016e4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2fe      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c6:	4b27      	ldr	r3, [pc, #156]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	061b      	lsls	r3, r3, #24
 80030e0:	4920      	ldr	r1, [pc, #128]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e6:	e045      	b.n	8003174 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d026      	beq.n	800313e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 0219 	bic.w	r2, r3, #25
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4919      	ldr	r1, [pc, #100]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe faef 	bl	80016e4 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe faeb 	bl	80016e4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e2d3      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	490b      	ldr	r1, [pc, #44]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	e01a      	b.n	8003174 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a08      	ldr	r2, [pc, #32]	@ (8003164 <HAL_RCC_OscConfig+0x244>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe facb 	bl	80016e4 <HAL_GetTick>
 800314e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe fac7 	bl	80016e4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d903      	bls.n	8003168 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e2af      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
 8003164:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003168:	4b96      	ldr	r3, [pc, #600]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ee      	bne.n	8003152 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d06a      	beq.n	8003256 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003180:	4b90      	ldr	r3, [pc, #576]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003188:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800318a:	4b8e      	ldr	r3, [pc, #568]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800318c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d007      	beq.n	80031a6 <HAL_RCC_OscConfig+0x286>
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b18      	cmp	r3, #24
 800319a:	d11b      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2b4>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d116      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031a6:	4b87      	ldr	r3, [pc, #540]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_RCC_OscConfig+0x29e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b80      	cmp	r3, #128	@ 0x80
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e282      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031be:	4b81      	ldr	r3, [pc, #516]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	497d      	ldr	r1, [pc, #500]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031d2:	e040      	b.n	8003256 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d023      	beq.n	8003224 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031dc:	4b79      	ldr	r3, [pc, #484]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a78      	ldr	r2, [pc, #480]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80031e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fa7c 	bl	80016e4 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031f0:	f7fe fa78 	bl	80016e4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e260      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003202:	4b70      	ldr	r3, [pc, #448]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800320e:	4b6d      	ldr	r3, [pc, #436]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	4969      	ldr	r1, [pc, #420]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	60cb      	str	r3, [r1, #12]
 8003222:	e018      	b.n	8003256 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003224:	4b67      	ldr	r3, [pc, #412]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a66      	ldr	r2, [pc, #408]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800322a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800322e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fa58 	bl	80016e4 <HAL_GetTick>
 8003234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003238:	f7fe fa54 	bl	80016e4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e23c      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800324a:	4b5e      	ldr	r3, [pc, #376]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d036      	beq.n	80032d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d019      	beq.n	800329e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326a:	4b56      	ldr	r3, [pc, #344]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800326c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326e:	4a55      	ldr	r2, [pc, #340]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe fa35 	bl	80016e4 <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe fa31 	bl	80016e4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e219      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003290:	4b4c      	ldr	r3, [pc, #304]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x35e>
 800329c:	e018      	b.n	80032d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329e:	4b49      	ldr	r3, [pc, #292]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80032a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a2:	4a48      	ldr	r2, [pc, #288]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe fa1b 	bl	80016e4 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe fa17 	bl	80016e4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1ff      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032c4:	4b3f      	ldr	r3, [pc, #252]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80032c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d036      	beq.n	800334a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d019      	beq.n	8003318 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e4:	4b37      	ldr	r3, [pc, #220]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a36      	ldr	r2, [pc, #216]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80032ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032f0:	f7fe f9f8 	bl	80016e4 <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f8:	f7fe f9f4 	bl	80016e4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1dc      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800330a:	4b2e      	ldr	r3, [pc, #184]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x3d8>
 8003316:	e018      	b.n	800334a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003318:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a29      	ldr	r2, [pc, #164]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 800331e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003322:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003324:	f7fe f9de 	bl	80016e4 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800332c:	f7fe f9da 	bl	80016e4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1c2      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800333e:	4b21      	ldr	r3, [pc, #132]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8086 	beq.w	8003464 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003358:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <HAL_RCC_OscConfig+0x4a8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1a      	ldr	r2, [pc, #104]	@ (80033c8 <HAL_RCC_OscConfig+0x4a8>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003364:	f7fe f9be 	bl	80016e4 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fe f9ba 	bl	80016e4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1a2      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <HAL_RCC_OscConfig+0x4a8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x480>
 8003392:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	4a0b      	ldr	r2, [pc, #44]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	@ 0x70
 800339e:	e032      	b.n	8003406 <HAL_RCC_OscConfig+0x4e6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <HAL_RCC_OscConfig+0x4ac>
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ac:	4a05      	ldr	r2, [pc, #20]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a02      	ldr	r2, [pc, #8]	@ (80033c4 <HAL_RCC_OscConfig+0x4a4>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c0:	e021      	b.n	8003406 <HAL_RCC_OscConfig+0x4e6>
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
 80033c8:	58024800 	.word	0x58024800
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d10c      	bne.n	80033ee <HAL_RCC_OscConfig+0x4ce>
 80033d4:	4b83      	ldr	r3, [pc, #524]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d8:	4a82      	ldr	r2, [pc, #520]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e0:	4b80      	ldr	r3, [pc, #512]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e4:	4a7f      	ldr	r2, [pc, #508]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ec:	e00b      	b.n	8003406 <HAL_RCC_OscConfig+0x4e6>
 80033ee:	4b7d      	ldr	r3, [pc, #500]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f2:	4a7c      	ldr	r2, [pc, #496]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033fa:	4b7a      	ldr	r3, [pc, #488]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	4a79      	ldr	r2, [pc, #484]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d015      	beq.n	800343a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fe f969 	bl	80016e4 <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fe f965 	bl	80016e4 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e14b      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800342c:	4b6d      	ldr	r3, [pc, #436]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ee      	beq.n	8003416 <HAL_RCC_OscConfig+0x4f6>
 8003438:	e014      	b.n	8003464 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fe f953 	bl	80016e4 <HAL_GetTick>
 800343e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe f94f 	bl	80016e4 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e135      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003458:	4b62      	ldr	r3, [pc, #392]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ee      	bne.n	8003442 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 812a 	beq.w	80036c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800346e:	4b5d      	ldr	r3, [pc, #372]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003476:	2b18      	cmp	r3, #24
 8003478:	f000 80ba 	beq.w	80035f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	2b02      	cmp	r3, #2
 8003482:	f040 8095 	bne.w	80035b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b57      	ldr	r3, [pc, #348]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a56      	ldr	r2, [pc, #344]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800348c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe f927 	bl	80016e4 <HAL_GetTick>
 8003496:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe f923 	bl	80016e4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e10b      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ac:	4b4d      	ldr	r3, [pc, #308]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b8:	4b4a      	ldr	r3, [pc, #296]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80034ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034bc:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <HAL_RCC_OscConfig+0x6c8>)
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	430a      	orrs	r2, r1
 80034cc:	4945      	ldr	r1, [pc, #276]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	628b      	str	r3, [r1, #40]	@ 0x28
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e0:	3b01      	subs	r3, #1
 80034e2:	025b      	lsls	r3, r3, #9
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	3b01      	subs	r3, #1
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fa:	3b01      	subs	r3, #1
 80034fc:	061b      	lsls	r3, r3, #24
 80034fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003502:	4938      	ldr	r1, [pc, #224]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003508:	4b36      	ldr	r3, [pc, #216]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a35      	ldr	r2, [pc, #212]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003514:	4b33      	ldr	r3, [pc, #204]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003518:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <HAL_RCC_OscConfig+0x6cc>)
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003520:	00d2      	lsls	r2, r2, #3
 8003522:	4930      	ldr	r1, [pc, #192]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003528:	4b2e      	ldr	r3, [pc, #184]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	f023 020c 	bic.w	r2, r3, #12
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	492b      	ldr	r1, [pc, #172]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800353a:	4b2a      	ldr	r3, [pc, #168]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	f023 0202 	bic.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	4927      	ldr	r1, [pc, #156]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800354c:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	4a24      	ldr	r2, [pc, #144]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003558:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	4a21      	ldr	r2, [pc, #132]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800355e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003564:	4b1f      	ldr	r3, [pc, #124]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	4a1e      	ldr	r2, [pc, #120]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800356a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800356e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003570:	4b1c      	ldr	r3, [pc, #112]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357c:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 8003582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe f8ac 	bl	80016e4 <HAL_GetTick>
 800358c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe f8a8 	bl	80016e4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e090      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035a2:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x670>
 80035ae:	e088      	b.n	80036c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0b      	ldr	r2, [pc, #44]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80035b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe f892 	bl	80016e4 <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe f88e 	bl	80016e4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e076      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035d6:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_RCC_OscConfig+0x6c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x6a4>
 80035e2:	e06e      	b.n	80036c2 <HAL_RCC_OscConfig+0x7a2>
 80035e4:	58024400 	.word	0x58024400
 80035e8:	fffffc0c 	.word	0xfffffc0c
 80035ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035f0:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035f6:	4b35      	ldr	r3, [pc, #212]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	2b01      	cmp	r3, #1
 8003602:	d031      	beq.n	8003668 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d12a      	bne.n	8003668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d122      	bne.n	8003668 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11a      	bne.n	8003668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0a5b      	lsrs	r3, r3, #9
 8003636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d111      	bne.n	8003668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d108      	bne.n	8003668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	0e1b      	lsrs	r3, r3, #24
 800365a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e02b      	b.n	80036c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800366c:	4b17      	ldr	r3, [pc, #92]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 800366e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003670:	08db      	lsrs	r3, r3, #3
 8003672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003676:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d01f      	beq.n	80036c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003682:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	4a11      	ldr	r2, [pc, #68]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800368e:	f7fe f829 	bl	80016e4 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003694:	bf00      	nop
 8003696:	f7fe f825 	bl	80016e4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	4293      	cmp	r3, r2
 80036a0:	d0f9      	beq.n	8003696 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 80036a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a6:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_RCC_OscConfig+0x7b0>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036ae:	00d2      	lsls	r2, r2, #3
 80036b0:	4906      	ldr	r1, [pc, #24]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036b6:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	4a04      	ldr	r2, [pc, #16]	@ (80036cc <HAL_RCC_OscConfig+0x7ac>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3730      	adds	r7, #48	@ 0x30
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	58024400 	.word	0x58024400
 80036d0:	ffff0007 	.word	0xffff0007

080036d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e19c      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d910      	bls.n	8003718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b87      	ldr	r3, [pc, #540]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 020f 	bic.w	r2, r3, #15
 80036fe:	4985      	ldr	r1, [pc, #532]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b83      	ldr	r3, [pc, #524]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e184      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	4b7b      	ldr	r3, [pc, #492]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003730:	429a      	cmp	r2, r3
 8003732:	d908      	bls.n	8003746 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003734:	4b78      	ldr	r3, [pc, #480]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	4975      	ldr	r1, [pc, #468]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003742:	4313      	orrs	r3, r2
 8003744:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	4b70      	ldr	r3, [pc, #448]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800375e:	429a      	cmp	r2, r3
 8003760:	d908      	bls.n	8003774 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003762:	4b6d      	ldr	r3, [pc, #436]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	496a      	ldr	r1, [pc, #424]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003770:	4313      	orrs	r3, r2
 8003772:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699a      	ldr	r2, [r3, #24]
 8003784:	4b64      	ldr	r3, [pc, #400]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800378c:	429a      	cmp	r2, r3
 800378e:	d908      	bls.n	80037a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003790:	4b61      	ldr	r3, [pc, #388]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	495e      	ldr	r1, [pc, #376]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d010      	beq.n	80037d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	4b59      	ldr	r3, [pc, #356]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d908      	bls.n	80037d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037be:	4b56      	ldr	r3, [pc, #344]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4953      	ldr	r1, [pc, #332]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d010      	beq.n	80037fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	4b4d      	ldr	r3, [pc, #308]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d908      	bls.n	80037fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f023 020f 	bic.w	r2, r3, #15
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4947      	ldr	r1, [pc, #284]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d055      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800380a:	4b43      	ldr	r3, [pc, #268]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4940      	ldr	r1, [pc, #256]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003818:	4313      	orrs	r3, r2
 800381a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d107      	bne.n	8003834 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003824:	4b3c      	ldr	r3, [pc, #240]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d121      	bne.n	8003874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0f6      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b03      	cmp	r3, #3
 800383a:	d107      	bne.n	800384c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800383c:	4b36      	ldr	r3, [pc, #216]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d115      	bne.n	8003874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0ea      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003854:	4b30      	ldr	r3, [pc, #192]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0de      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003864:	4b2c      	ldr	r3, [pc, #176]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d6      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003874:	4b28      	ldr	r3, [pc, #160]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f023 0207 	bic.w	r2, r3, #7
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4925      	ldr	r1, [pc, #148]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 8003882:	4313      	orrs	r3, r2
 8003884:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003886:	f7fd ff2d 	bl	80016e4 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388e:	f7fd ff29 	bl	80016e4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0be      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d1eb      	bne.n	800388e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d010      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d208      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f023 020f 	bic.w	r2, r3, #15
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	490e      	ldr	r1, [pc, #56]	@ (8003918 <HAL_RCC_ClockConfig+0x244>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d214      	bcs.n	800391c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 020f 	bic.w	r2, r3, #15
 80038fa:	4906      	ldr	r1, [pc, #24]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <HAL_RCC_ClockConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e086      	b.n	8003a22 <HAL_RCC_ClockConfig+0x34e>
 8003914:	52002000 	.word	0x52002000
 8003918:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003934:	429a      	cmp	r2, r3
 8003936:	d208      	bcs.n	800394a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003938:	4b3c      	ldr	r3, [pc, #240]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	4939      	ldr	r1, [pc, #228]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 8003946:	4313      	orrs	r3, r2
 8003948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d010      	beq.n	8003978 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	4b34      	ldr	r3, [pc, #208]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003962:	429a      	cmp	r2, r3
 8003964:	d208      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003966:	4b31      	ldr	r3, [pc, #196]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	492e      	ldr	r1, [pc, #184]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 8003974:	4313      	orrs	r3, r2
 8003976:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	4b28      	ldr	r3, [pc, #160]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003990:	429a      	cmp	r2, r3
 8003992:	d208      	bcs.n	80039a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003994:	4b25      	ldr	r3, [pc, #148]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	4922      	ldr	r1, [pc, #136]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039be:	429a      	cmp	r2, r3
 80039c0:	d208      	bcs.n	80039d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039c2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	4917      	ldr	r1, [pc, #92]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039d4:	f000 f834 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	4912      	ldr	r1, [pc, #72]	@ (8003a30 <HAL_RCC_ClockConfig+0x35c>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
 80039f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039f2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <HAL_RCC_ClockConfig+0x358>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <HAL_RCC_ClockConfig+0x35c>)
 80039fc:	5cd3      	ldrb	r3, [r2, r3]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <HAL_RCC_ClockConfig+0x360>)
 8003a0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a38 <HAL_RCC_ClockConfig+0x364>)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a12:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <HAL_RCC_ClockConfig+0x368>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fe1a 	bl	8001650 <HAL_InitTick>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	0800726c 	.word	0x0800726c
 8003a34:	2400000c 	.word	0x2400000c
 8003a38:	24000008 	.word	0x24000008
 8003a3c:	24000010 	.word	0x24000010

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	@ 0x24
 8003a44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a46:	4bb3      	ldr	r3, [pc, #716]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a4e:	2b18      	cmp	r3, #24
 8003a50:	f200 8155 	bhi.w	8003cfe <HAL_RCC_GetSysClockFreq+0x2be>
 8003a54:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003ac1 	.word	0x08003ac1
 8003a60:	08003cff 	.word	0x08003cff
 8003a64:	08003cff 	.word	0x08003cff
 8003a68:	08003cff 	.word	0x08003cff
 8003a6c:	08003cff 	.word	0x08003cff
 8003a70:	08003cff 	.word	0x08003cff
 8003a74:	08003cff 	.word	0x08003cff
 8003a78:	08003cff 	.word	0x08003cff
 8003a7c:	08003ae7 	.word	0x08003ae7
 8003a80:	08003cff 	.word	0x08003cff
 8003a84:	08003cff 	.word	0x08003cff
 8003a88:	08003cff 	.word	0x08003cff
 8003a8c:	08003cff 	.word	0x08003cff
 8003a90:	08003cff 	.word	0x08003cff
 8003a94:	08003cff 	.word	0x08003cff
 8003a98:	08003cff 	.word	0x08003cff
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003cff 	.word	0x08003cff
 8003aa4:	08003cff 	.word	0x08003cff
 8003aa8:	08003cff 	.word	0x08003cff
 8003aac:	08003cff 	.word	0x08003cff
 8003ab0:	08003cff 	.word	0x08003cff
 8003ab4:	08003cff 	.word	0x08003cff
 8003ab8:	08003cff 	.word	0x08003cff
 8003abc:	08003af3 	.word	0x08003af3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac0:	4b94      	ldr	r3, [pc, #592]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003acc:	4b91      	ldr	r3, [pc, #580]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	4a90      	ldr	r2, [pc, #576]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ade:	e111      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ae2:	61bb      	str	r3, [r7, #24]
      break;
 8003ae4:	e10e      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ae8:	61bb      	str	r3, [r7, #24]
      break;
 8003aea:	e10b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003aec:	4b8c      	ldr	r3, [pc, #560]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003aee:	61bb      	str	r3, [r7, #24]
      break;
 8003af0:	e108      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003af2:	4b88      	ldr	r3, [pc, #544]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003afc:	4b85      	ldr	r3, [pc, #532]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b08:	4b82      	ldr	r3, [pc, #520]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b12:	4b80      	ldr	r3, [pc, #512]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b16:	08db      	lsrs	r3, r3, #3
 8003b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80e1 	beq.w	8003cf8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f000 8083 	beq.w	8003c44 <HAL_RCC_GetSysClockFreq+0x204>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	f200 80a1 	bhi.w	8003c88 <HAL_RCC_GetSysClockFreq+0x248>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0x114>
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d056      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b52:	e099      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b54:	4b6f      	ldr	r3, [pc, #444]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02d      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b60:	4b6c      	ldr	r3, [pc, #432]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	08db      	lsrs	r3, r3, #3
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	4a6b      	ldr	r2, [pc, #428]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8a:	4b62      	ldr	r3, [pc, #392]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003bba:	e087      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003d28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bce:	4b51      	ldr	r3, [pc, #324]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfe:	e065      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003d2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b40      	ldr	r3, [pc, #256]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c42:	e043      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003d30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c56:	4b2f      	ldr	r3, [pc, #188]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c86:	e021      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003d2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ccc:	4b11      	ldr	r3, [pc, #68]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	0a5b      	lsrs	r3, r3, #9
 8003cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf0:	ee17 3a90 	vmov	r3, s15
 8003cf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cf6:	e005      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
      break;
 8003cfc:	e002      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cfe:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d00:	61bb      	str	r3, [r7, #24]
      break;
 8003d02:	bf00      	nop
  }

  return sysclockfreq;
 8003d04:	69bb      	ldr	r3, [r7, #24]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3724      	adds	r7, #36	@ 0x24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	58024400 	.word	0x58024400
 8003d18:	03d09000 	.word	0x03d09000
 8003d1c:	003d0900 	.word	0x003d0900
 8003d20:	017d7840 	.word	0x017d7840
 8003d24:	46000000 	.word	0x46000000
 8003d28:	4c742400 	.word	0x4c742400
 8003d2c:	4a742400 	.word	0x4a742400
 8003d30:	4bbebc20 	.word	0x4bbebc20

08003d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d3a:	f7ff fe81 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490f      	ldr	r1, [pc, #60]	@ (8003d88 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d58:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	4a07      	ldr	r2, [pc, #28]	@ (8003d8c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d72:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d78:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	58024400 	.word	0x58024400
 8003d88:	0800726c 	.word	0x0800726c
 8003d8c:	2400000c 	.word	0x2400000c
 8003d90:	24000008 	.word	0x24000008

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d98:	f7ff ffcc 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4904      	ldr	r1, [pc, #16]	@ (8003dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	0800726c 	.word	0x0800726c

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003dc4:	f7ff ffb6 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4904      	ldr	r1, [pc, #16]	@ (8003de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	58024400 	.word	0x58024400
 8003de8:	0800726c 	.word	0x0800726c

08003dec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b0c6      	sub	sp, #280	@ 0x118
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003e10:	2500      	movs	r5, #0
 8003e12:	ea54 0305 	orrs.w	r3, r4, r5
 8003e16:	d049      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e22:	d02f      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e28:	d828      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e2e:	d01a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e34:	d822      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3e:	d007      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e40:	e01c      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e42:	4bab      	ldr	r3, [pc, #684]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	4aaa      	ldr	r2, [pc, #680]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e4e:	e01a      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e54:	3308      	adds	r3, #8
 8003e56:	2102      	movs	r1, #2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 fc25 	bl	80056a8 <RCCEx_PLL2_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e64:	e00f      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6a:	3328      	adds	r3, #40	@ 0x28
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 fccc 	bl	800580c <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e7a:	e004      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e82:	e000      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e8e:	4b98      	ldr	r3, [pc, #608]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e9c:	4a94      	ldr	r2, [pc, #592]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003eb8:	f04f 0900 	mov.w	r9, #0
 8003ebc:	ea58 0309 	orrs.w	r3, r8, r9
 8003ec0:	d047      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d82a      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ee9 	.word	0x08003ee9
 8003ed8:	08003ef7 	.word	0x08003ef7
 8003edc:	08003f0d 	.word	0x08003f0d
 8003ee0:	08003f2b 	.word	0x08003f2b
 8003ee4:	08003f2b 	.word	0x08003f2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee8:	4b81      	ldr	r3, [pc, #516]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	4a80      	ldr	r2, [pc, #512]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e01a      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	3308      	adds	r3, #8
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fbd2 	bl	80056a8 <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e00f      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f10:	3328      	adds	r3, #40	@ 0x28
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fc79 	bl	800580c <RCCEx_PLL3_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f20:	e004      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f34:	4b6e      	ldr	r3, [pc, #440]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f38:	f023 0107 	bic.w	r1, r3, #7
 8003f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	4a6b      	ldr	r2, [pc, #428]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f48:	e003      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003f5e:	f04f 0b00 	mov.w	fp, #0
 8003f62:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f66:	d05b      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f70:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003f74:	d03b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003f76:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003f7a:	d834      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f80:	d037      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f86:	d82e      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f8c:	d033      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f92:	d828      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f98:	d01a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f9e:	d822      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003fa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fa8:	d007      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003faa:	e01c      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fac:	4b50      	ldr	r3, [pc, #320]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	4a4f      	ldr	r2, [pc, #316]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fb8:	e01e      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fb70 	bl	80056a8 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fce:	e013      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd4:	3328      	adds	r3, #40	@ 0x28
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 fc17 	bl	800580c <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fec:	e004      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004000:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004010:	4a37      	ldr	r2, [pc, #220]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004012:	430b      	orrs	r3, r1
 8004014:	6593      	str	r3, [r2, #88]	@ 0x58
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800401c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800402c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004036:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800403a:	460b      	mov	r3, r1
 800403c:	4313      	orrs	r3, r2
 800403e:	d05d      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004048:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800404c:	d03b      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800404e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004052:	d834      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004054:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004058:	d037      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800405a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800405e:	d82e      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004060:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004064:	d033      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004066:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800406a:	d828      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800406c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004070:	d01a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004076:	d822      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800407c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004080:	d007      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004082:	e01c      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004084:	4b1a      	ldr	r3, [pc, #104]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800408a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800408e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004090:	e01e      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004096:	3308      	adds	r3, #8
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fb04 	bl	80056a8 <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040a6:	e013      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f001 fbab 	bl	800580c <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040bc:	e008      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040c4:	e004      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80040ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10d      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80040e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040e8:	4a01      	ldr	r2, [pc, #4]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040ea:	430b      	orrs	r3, r1
 80040ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ee:	e005      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004108:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004112:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d03a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	2b30      	cmp	r3, #48	@ 0x30
 8004124:	d01f      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004126:	2b30      	cmp	r3, #48	@ 0x30
 8004128:	d819      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800412a:	2b20      	cmp	r3, #32
 800412c:	d00c      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800412e:	2b20      	cmp	r3, #32
 8004130:	d815      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d019      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004136:	2b10      	cmp	r3, #16
 8004138:	d111      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413a:	4baa      	ldr	r3, [pc, #680]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	4aa9      	ldr	r2, [pc, #676]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004146:	e011      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414c:	3308      	adds	r3, #8
 800414e:	2102      	movs	r1, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f001 faa9 	bl	80056a8 <RCCEx_PLL2_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004164:	e002      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800416a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004174:	4b9b      	ldr	r3, [pc, #620]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004178:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800417c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004182:	4a98      	ldr	r2, [pc, #608]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004184:	430b      	orrs	r3, r1
 8004186:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800418e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800419e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80041a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d051      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041bc:	d035      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80041be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041c2:	d82e      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80041c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041c8:	d031      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80041ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041ce:	d828      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d4:	d01a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041da:	d822      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e4:	d007      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80041e6:	e01c      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4b7e      	ldr	r3, [pc, #504]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	4a7d      	ldr	r2, [pc, #500]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041f4:	e01c      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fa:	3308      	adds	r3, #8
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fa52 	bl	80056a8 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800420a:	e011      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004210:	3328      	adds	r3, #40	@ 0x28
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f001 faf9 	bl	800580c <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004238:	4b6a      	ldr	r3, [pc, #424]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800423a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	4a67      	ldr	r2, [pc, #412]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6513      	str	r3, [r2, #80]	@ 0x50
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004252:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800426c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d053      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004280:	d033      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004282:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004286:	d82c      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004288:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800428c:	d02f      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x502>
 800428e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004292:	d826      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004294:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004298:	d02b      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800429a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800429e:	d820      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042a4:	d012      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80042a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042aa:	d81a      	bhi.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d022      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b4:	d115      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ba:	3308      	adds	r3, #8
 80042bc:	2101      	movs	r1, #1
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 f9f2 	bl	80056a8 <RCCEx_PLL2_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042ca:	e015      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d0:	3328      	adds	r3, #40	@ 0x28
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fa99 	bl	800580c <RCCEx_PLL3_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042e0:	e00a      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042e8:	e006      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80042f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004300:	4b38      	ldr	r3, [pc, #224]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004304:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430e:	4a35      	ldr	r2, [pc, #212]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6513      	str	r3, [r2, #80]	@ 0x50
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800431e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800432a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004334:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d058      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800433e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434a:	d033      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800434c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004350:	d82c      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435c:	d826      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800435e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004362:	d02b      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004364:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004368:	d820      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800436a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800436e:	d012      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004374:	d81a      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d022      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800437a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800437e:	d115      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004384:	3308      	adds	r3, #8
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f98d 	bl	80056a8 <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004394:	e015      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439a:	3328      	adds	r3, #40	@ 0x28
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 fa34 	bl	800580c <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043aa:	e00a      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043b2:	e006      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043b4:	bf00      	nop
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043b8:	bf00      	nop
 80043ba:	e002      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10e      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043ca:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043da:	4a02      	ldr	r2, [pc, #8]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e0:	e006      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80043e2:	bf00      	nop
 80043e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80043fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004406:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800440a:	460b      	mov	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	d037      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800441a:	d00e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004420:	d816      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d018      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800442a:	d111      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4bc4      	ldr	r3, [pc, #784]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	4ac3      	ldr	r2, [pc, #780]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443e:	3308      	adds	r3, #8
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f930 	bl	80056a8 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004462:	4bb7      	ldr	r3, [pc, #732]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004466:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004470:	4ab3      	ldr	r2, [pc, #716]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6513      	str	r3, [r2, #80]	@ 0x50
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800447c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800448c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004496:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d039      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d81c      	bhi.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044ed 	.word	0x080044ed
 80044b4:	080044c1 	.word	0x080044c1
 80044b8:	080044cf 	.word	0x080044cf
 80044bc:	080044ed 	.word	0x080044ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c0:	4b9f      	ldr	r3, [pc, #636]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	4a9e      	ldr	r2, [pc, #632]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044cc:	e00f      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d2:	3308      	adds	r3, #8
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f001 f8e6 	bl	80056a8 <RCCEx_PLL2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044e2:	e004      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80044ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044f6:	4b92      	ldr	r3, [pc, #584]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fa:	f023 0103 	bic.w	r1, r3, #3
 80044fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004504:	4a8e      	ldr	r2, [pc, #568]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004506:	430b      	orrs	r3, r1
 8004508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800450a:	e003      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800452a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	f000 8099 	beq.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004536:	4b83      	ldr	r3, [pc, #524]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a82      	ldr	r2, [pc, #520]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004542:	f7fd f8cf 	bl	80016e4 <HAL_GetTick>
 8004546:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454a:	e00b      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fd f8ca 	bl	80016e4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b64      	cmp	r3, #100	@ 0x64
 800455a:	d903      	bls.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004562:	e005      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004564:	4b77      	ldr	r3, [pc, #476]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ed      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004574:	2b00      	cmp	r3, #0
 8004576:	d173      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004578:	4b71      	ldr	r3, [pc, #452]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800457a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800457c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004584:	4053      	eors	r3, r2
 8004586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d015      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800458e:	4b6c      	ldr	r3, [pc, #432]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004596:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800459a:	4b69      	ldr	r3, [pc, #420]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	4a68      	ldr	r2, [pc, #416]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045a6:	4b66      	ldr	r3, [pc, #408]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a65      	ldr	r2, [pc, #404]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045b2:	4a63      	ldr	r2, [pc, #396]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c6:	d118      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fd f88c 	bl	80016e4 <HAL_GetTick>
 80045cc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d0:	e00d      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fd f887 	bl	80016e4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80045dc:	1ad2      	subs	r2, r2, r3
 80045de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d903      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80045ec:	e005      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ee:	4b54      	ldr	r3, [pc, #336]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0eb      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80045fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d129      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800460a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004612:	d10e      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004614:	4b4a      	ldr	r3, [pc, #296]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800461c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004624:	091a      	lsrs	r2, r3, #4
 8004626:	4b48      	ldr	r3, [pc, #288]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004628:	4013      	ands	r3, r2
 800462a:	4a45      	ldr	r2, [pc, #276]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6113      	str	r3, [r2, #16]
 8004630:	e005      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004632:	4b43      	ldr	r3, [pc, #268]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4a42      	ldr	r2, [pc, #264]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004638:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800463c:	6113      	str	r3, [r2, #16]
 800463e:	4b40      	ldr	r3, [pc, #256]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004640:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004646:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800464a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464e:	4a3c      	ldr	r2, [pc, #240]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6713      	str	r3, [r2, #112]	@ 0x70
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800465a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f002 0301 	and.w	r3, r2, #1
 8004674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800467e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	f000 808f 	beq.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800468a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004690:	2b28      	cmp	r3, #40	@ 0x28
 8004692:	d871      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	08004781 	.word	0x08004781
 80046a0:	08004779 	.word	0x08004779
 80046a4:	08004779 	.word	0x08004779
 80046a8:	08004779 	.word	0x08004779
 80046ac:	08004779 	.word	0x08004779
 80046b0:	08004779 	.word	0x08004779
 80046b4:	08004779 	.word	0x08004779
 80046b8:	08004779 	.word	0x08004779
 80046bc:	0800474d 	.word	0x0800474d
 80046c0:	08004779 	.word	0x08004779
 80046c4:	08004779 	.word	0x08004779
 80046c8:	08004779 	.word	0x08004779
 80046cc:	08004779 	.word	0x08004779
 80046d0:	08004779 	.word	0x08004779
 80046d4:	08004779 	.word	0x08004779
 80046d8:	08004779 	.word	0x08004779
 80046dc:	08004763 	.word	0x08004763
 80046e0:	08004779 	.word	0x08004779
 80046e4:	08004779 	.word	0x08004779
 80046e8:	08004779 	.word	0x08004779
 80046ec:	08004779 	.word	0x08004779
 80046f0:	08004779 	.word	0x08004779
 80046f4:	08004779 	.word	0x08004779
 80046f8:	08004779 	.word	0x08004779
 80046fc:	08004781 	.word	0x08004781
 8004700:	08004779 	.word	0x08004779
 8004704:	08004779 	.word	0x08004779
 8004708:	08004779 	.word	0x08004779
 800470c:	08004779 	.word	0x08004779
 8004710:	08004779 	.word	0x08004779
 8004714:	08004779 	.word	0x08004779
 8004718:	08004779 	.word	0x08004779
 800471c:	08004781 	.word	0x08004781
 8004720:	08004779 	.word	0x08004779
 8004724:	08004779 	.word	0x08004779
 8004728:	08004779 	.word	0x08004779
 800472c:	08004779 	.word	0x08004779
 8004730:	08004779 	.word	0x08004779
 8004734:	08004779 	.word	0x08004779
 8004738:	08004779 	.word	0x08004779
 800473c:	08004781 	.word	0x08004781
 8004740:	58024400 	.word	0x58024400
 8004744:	58024800 	.word	0x58024800
 8004748:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004750:	3308      	adds	r3, #8
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f000 ffa7 	bl	80056a8 <RCCEx_PLL2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004760:	e00f      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004766:	3328      	adds	r3, #40	@ 0x28
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f84e 	bl	800580c <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800478a:	4bbf      	ldr	r3, [pc, #764]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004798:	4abb      	ldr	r2, [pc, #748]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800479a:	430b      	orrs	r3, r1
 800479c:	6553      	str	r3, [r2, #84]	@ 0x54
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 0302 	and.w	r3, r2, #2
 80047b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d041      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d824      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80047d2:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	08004825 	.word	0x08004825
 80047dc:	080047f1 	.word	0x080047f1
 80047e0:	08004807 	.word	0x08004807
 80047e4:	08004825 	.word	0x08004825
 80047e8:	08004825 	.word	0x08004825
 80047ec:	08004825 	.word	0x08004825
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f4:	3308      	adds	r3, #8
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 ff55 	bl	80056a8 <RCCEx_PLL2_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004804:	e00f      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480a:	3328      	adds	r3, #40	@ 0x28
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fffc 	bl	800580c <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800482e:	4b96      	ldr	r3, [pc, #600]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	f023 0107 	bic.w	r1, r3, #7
 8004836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800483a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483c:	4a92      	ldr	r2, [pc, #584]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800483e:	430b      	orrs	r3, r1
 8004840:	6553      	str	r3, [r2, #84]	@ 0x54
 8004842:	e003      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004848:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800484c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f002 0304 	and.w	r3, r2, #4
 8004858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004862:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004866:	460b      	mov	r3, r1
 8004868:	4313      	orrs	r3, r2
 800486a:	d044      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	2b05      	cmp	r3, #5
 8004876:	d825      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048cd 	.word	0x080048cd
 8004884:	08004899 	.word	0x08004899
 8004888:	080048af 	.word	0x080048af
 800488c:	080048cd 	.word	0x080048cd
 8004890:	080048cd 	.word	0x080048cd
 8004894:	080048cd 	.word	0x080048cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489c:	3308      	adds	r3, #8
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 ff01 	bl	80056a8 <RCCEx_PLL2_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048ac:	e00f      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b2:	3328      	adds	r3, #40	@ 0x28
 80048b4:	2101      	movs	r1, #1
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 ffa8 	bl	800580c <RCCEx_PLL3_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048c2:	e004      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80048cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	f023 0107 	bic.w	r1, r3, #7
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	4a68      	ldr	r2, [pc, #416]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ec:	e003      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f002 0320 	and.w	r3, r2, #32
 8004902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004906:	2300      	movs	r3, #0
 8004908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800490c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d055      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800491e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004922:	d033      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004928:	d82c      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492e:	d02f      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004934:	d826      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004936:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800493a:	d02b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800493c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004940:	d820      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004946:	d012      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800494c:	d81a      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d022      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004956:	d115      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495c:	3308      	adds	r3, #8
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fea1 	bl	80056a8 <RCCEx_PLL2_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800496c:	e015      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004972:	3328      	adds	r3, #40	@ 0x28
 8004974:	2102      	movs	r1, #2
 8004976:	4618      	mov	r0, r3
 8004978:	f000 ff48 	bl	800580c <RCCEx_PLL3_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004982:	e00a      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800498a:	e006      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800498c:	bf00      	nop
 800498e:	e004      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004990:	bf00      	nop
 8004992:	e002      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004994:	bf00      	nop
 8004996:	e000      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a2:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049b2:	4a35      	ldr	r2, [pc, #212]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80049ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80049dc:	460b      	mov	r3, r1
 80049de:	4313      	orrs	r3, r2
 80049e0:	d058      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049ee:	d033      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80049f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049f4:	d82c      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fa:	d02f      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a00:	d826      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a06:	d02b      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004a08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a0c:	d820      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a12:	d012      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a18:	d81a      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d022      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a22:	d115      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a28:	3308      	adds	r3, #8
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fe3b 	bl	80056a8 <RCCEx_PLL2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a38:	e015      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3e:	3328      	adds	r3, #40	@ 0x28
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fee2 	bl	800580c <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a56:	e006      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a58:	bf00      	nop
 8004a5a:	e004      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a5c:	bf00      	nop
 8004a5e:	e002      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a60:	bf00      	nop
 8004a62:	e000      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a7e:	4a02      	ldr	r2, [pc, #8]	@ (8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004a86:	bf00      	nop
 8004a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004aa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004aaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d055      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004abc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ac0:	d033      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004ac2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ac6:	d82c      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004acc:	d02f      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad2:	d826      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ad4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ad8:	d02b      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004ada:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ade:	d820      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ae4:	d012      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004ae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aea:	d81a      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d022      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af4:	d115      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afa:	3308      	adds	r3, #8
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fdd2 	bl	80056a8 <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b0a:	e015      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b10:	3328      	adds	r3, #40	@ 0x28
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fe79 	bl	800580c <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b20:	e00a      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b40:	4ba0      	ldr	r3, [pc, #640]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b50:	4a9c      	ldr	r2, [pc, #624]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b56:	e003      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f002 0308 	and.w	r3, r2, #8
 8004b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d01e      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b92:	3328      	adds	r3, #40	@ 0x28
 8004b94:	2102      	movs	r1, #2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fe38 	bl	800580c <RCCEx_PLL3_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004ba8:	4b86      	ldr	r3, [pc, #536]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb8:	4a82      	ldr	r2, [pc, #520]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f002 0310 	and.w	r3, r2, #16
 8004bca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bd4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	d01e      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bea:	d10c      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf0:	3328      	adds	r3, #40	@ 0x28
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fe09 	bl	800580c <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c06:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c16:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c2e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d03e      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c44:	d022      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c4a:	d81b      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c54:	d00b      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004c56:	e015      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fd21 	bl	80056a8 <RCCEx_PLL2_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c6c:	e00f      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c72:	3328      	adds	r3, #40	@ 0x28
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fdc8 	bl	800580c <RCCEx_PLL3_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c82:	e004      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c96:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ca6:	4a47      	ldr	r2, [pc, #284]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004cc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d03b      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cde:	d01f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ce0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ce4:	d818      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cea:	d003      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004cec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cf0:	d007      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004cf2:	e011      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf4:	4b33      	ldr	r3, [pc, #204]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	4a32      	ldr	r2, [pc, #200]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d00:	e00f      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d06:	3328      	adds	r3, #40	@ 0x28
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fd7e 	bl	800580c <RCCEx_PLL3_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d16:	e004      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d1e:	e000      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d2a:	4b26      	ldr	r3, [pc, #152]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3a:	4a22      	ldr	r2, [pc, #136]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d40:	e003      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d58:	2300      	movs	r3, #0
 8004d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d034      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d74:	d007      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004d76:	e011      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d78:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	4a11      	ldr	r2, [pc, #68]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d84:	e00e      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fc8a 	bl	80056a8 <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d9a:	e003      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dba:	4a02      	ldr	r2, [pc, #8]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ddc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dde:	2300      	movs	r3, #0
 8004de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004de2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d00c      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df0:	3328      	adds	r3, #40	@ 0x28
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fd09 	bl	800580c <RCCEx_PLL3_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e14:	2300      	movs	r3, #0
 8004e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e18:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	d036      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e2c:	d018      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e32:	d811      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e38:	d014      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3e:	d80b      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d011      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e48:	d106      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4a:	4bb7      	ldr	r3, [pc, #732]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	4ab6      	ldr	r2, [pc, #728]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e56:	e008      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e5e:	e004      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e60:	bf00      	nop
 8004e62:	e002      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e64:	bf00      	nop
 8004e66:	e000      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e72:	4bad      	ldr	r3, [pc, #692]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e80:	4aa9      	ldr	r2, [pc, #676]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e86:	e003      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ea2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004eac:	4b9e      	ldr	r3, [pc, #632]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	4a9b      	ldr	r2, [pc, #620]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ece:	2300      	movs	r3, #0
 8004ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004edc:	4b92      	ldr	r3, [pc, #584]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eea:	4a8f      	ldr	r2, [pc, #572]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004efe:	2300      	movs	r3, #0
 8004f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f0c:	4b86      	ldr	r3, [pc, #536]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	4a85      	ldr	r2, [pc, #532]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f16:	6113      	str	r3, [r2, #16]
 8004f18:	4b83      	ldr	r3, [pc, #524]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f1a:	6919      	ldr	r1, [r3, #16]
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f24:	4a80      	ldr	r2, [pc, #512]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f38:	2300      	movs	r3, #0
 8004f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f40:	460b      	mov	r3, r1
 8004f42:	4313      	orrs	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f46:	4b78      	ldr	r3, [pc, #480]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f54:	4a74      	ldr	r2, [pc, #464]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f56:	430b      	orrs	r3, r1
 8004f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f66:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f68:	2300      	movs	r3, #0
 8004f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f70:	460b      	mov	r3, r1
 8004f72:	4313      	orrs	r3, r2
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f76:	4b6c      	ldr	r3, [pc, #432]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	4a68      	ldr	r2, [pc, #416]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	2100      	movs	r1, #0
 8004f96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d011      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fac:	3308      	adds	r3, #8
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fb79 	bl	80056a8 <RCCEx_PLL2_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	6239      	str	r1, [r7, #32]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fde:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	d011      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fec:	3308      	adds	r3, #8
 8004fee:	2101      	movs	r1, #1
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fb59 	bl	80056a8 <RCCEx_PLL2_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	2100      	movs	r1, #0
 8005016:	61b9      	str	r1, [r7, #24]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	d011      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502c:	3308      	adds	r3, #8
 800502e:	2102      	movs	r1, #2
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fb39 	bl	80056a8 <RCCEx_PLL2_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800503c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	2100      	movs	r1, #0
 8005056:	6139      	str	r1, [r7, #16]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005062:	460b      	mov	r3, r1
 8005064:	4313      	orrs	r3, r2
 8005066:	d011      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506c:	3328      	adds	r3, #40	@ 0x28
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fbcb 	bl	800580c <RCCEx_PLL3_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800507c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	2100      	movs	r1, #0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050a2:	460b      	mov	r3, r1
 80050a4:	4313      	orrs	r3, r2
 80050a6:	d011      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ac:	3328      	adds	r3, #40	@ 0x28
 80050ae:	2101      	movs	r1, #1
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fbab 	bl	800580c <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80050bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	2100      	movs	r1, #0
 80050d6:	6039      	str	r1, [r7, #0]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050e2:	460b      	mov	r3, r1
 80050e4:	4313      	orrs	r3, r2
 80050e6:	d011      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ec:	3328      	adds	r3, #40	@ 0x28
 80050ee:	2102      	movs	r1, #2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fb8b 	bl	800580c <RCCEx_PLL3_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80050fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005108:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800510c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
}
 800511a:	4618      	mov	r0, r3
 800511c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005120:	46bd      	mov	sp, r7
 8005122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005126:	bf00      	nop
 8005128:	58024400 	.word	0x58024400

0800512c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005130:	f7fe fe00 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4904      	ldr	r1, [pc, #16]	@ (8005154 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd80      	pop	{r7, pc}
 8005150:	58024400 	.word	0x58024400
 8005154:	0800726c 	.word	0x0800726c

08005158 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	@ 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005160:	4ba1      	ldr	r3, [pc, #644]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800516a:	4b9f      	ldr	r3, [pc, #636]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	0b1b      	lsrs	r3, r3, #12
 8005170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005174:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005176:	4b9c      	ldr	r3, [pc, #624]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005182:	4b99      	ldr	r3, [pc, #612]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8111 	beq.w	80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f000 8083 	beq.w	80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f200 80a1 	bhi.w	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d056      	beq.n	8005270 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051c2:	e099      	b.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c4:	4b88      	ldr	r3, [pc, #544]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02d      	beq.n	800522c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d0:	4b85      	ldr	r3, [pc, #532]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	08db      	lsrs	r3, r3, #3
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	4a84      	ldr	r2, [pc, #528]	@ (80053ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
 80051e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b7b      	ldr	r3, [pc, #492]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a03 	vldr	s12, [r7, #12]
 800520e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800522a:	e087      	b.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b6a      	ldr	r3, [pc, #424]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005252:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800526e:	e065      	b.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005282:	4b59      	ldr	r3, [pc, #356]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005292:	ed97 6a03 	vldr	s12, [r7, #12]
 8005296:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052b2:	e043      	b.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b48      	ldr	r3, [pc, #288]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f6:	e021      	b.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b37      	ldr	r3, [pc, #220]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a03 	vldr	s12, [r7, #12]
 800531e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800533c:	4b2a      	ldr	r3, [pc, #168]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	0a5b      	lsrs	r3, r3, #9
 8005342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005356:	edd7 6a07 	vldr	s13, [r7, #28]
 800535a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800535e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005362:	ee17 2a90 	vmov	r2, s15
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800536a:	4b1f      	ldr	r3, [pc, #124]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005380:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005384:	edd7 6a07 	vldr	s13, [r7, #28]
 8005388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005390:	ee17 2a90 	vmov	r2, s15
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005398:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	0e1b      	lsrs	r3, r3, #24
 800539e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053be:	ee17 2a90 	vmov	r2, s15
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053c6:	e008      	b.n	80053da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	609a      	str	r2, [r3, #8]
}
 80053da:	bf00      	nop
 80053dc:	3724      	adds	r7, #36	@ 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	58024400 	.word	0x58024400
 80053ec:	03d09000 	.word	0x03d09000
 80053f0:	46000000 	.word	0x46000000
 80053f4:	4c742400 	.word	0x4c742400
 80053f8:	4a742400 	.word	0x4a742400
 80053fc:	4bbebc20 	.word	0x4bbebc20

08005400 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	@ 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005408:	4ba1      	ldr	r3, [pc, #644]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005412:	4b9f      	ldr	r3, [pc, #636]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	0d1b      	lsrs	r3, r3, #20
 8005418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800541c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800541e:	4b9c      	ldr	r3, [pc, #624]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800542a:	4b99      	ldr	r3, [pc, #612]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	08db      	lsrs	r3, r3, #3
 8005430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8111 	beq.w	8005670 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b02      	cmp	r3, #2
 8005452:	f000 8083 	beq.w	800555c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b02      	cmp	r3, #2
 800545a:	f200 80a1 	bhi.w	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d056      	beq.n	8005518 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800546a:	e099      	b.n	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800546c:	4b88      	ldr	r3, [pc, #544]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02d      	beq.n	80054d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005478:	4b85      	ldr	r3, [pc, #532]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	4a84      	ldr	r2, [pc, #528]	@ (8005694 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054d2:	e087      	b.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800569c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005516:	e065      	b.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	4b59      	ldr	r3, [pc, #356]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553a:	ed97 6a03 	vldr	s12, [r7, #12]
 800553e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800555a:	e043      	b.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80056a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b48      	ldr	r3, [pc, #288]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005582:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800559e:	e021      	b.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b2:	4b37      	ldr	r3, [pc, #220]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80055e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	0a5b      	lsrs	r3, r3, #9
 80055ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560a:	ee17 2a90 	vmov	r2, s15
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005612:	4b1f      	ldr	r3, [pc, #124]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800562c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005638:	ee17 2a90 	vmov	r2, s15
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005640:	4b13      	ldr	r3, [pc, #76]	@ (8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005644:	0e1b      	lsrs	r3, r3, #24
 8005646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005652:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800565a:	edd7 6a07 	vldr	s13, [r7, #28]
 800565e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005666:	ee17 2a90 	vmov	r2, s15
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800566e:	e008      	b.n	8005682 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	609a      	str	r2, [r3, #8]
}
 8005682:	bf00      	nop
 8005684:	3724      	adds	r7, #36	@ 0x24
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
 8005694:	03d09000 	.word	0x03d09000
 8005698:	46000000 	.word	0x46000000
 800569c:	4c742400 	.word	0x4c742400
 80056a0:	4a742400 	.word	0x4a742400
 80056a4:	4bbebc20 	.word	0x4bbebc20

080056a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056b6:	4b53      	ldr	r3, [pc, #332]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d101      	bne.n	80056c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e099      	b.n	80057fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a4e      	ldr	r2, [pc, #312]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80056cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d2:	f7fc f807 	bl	80016e4 <HAL_GetTick>
 80056d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056d8:	e008      	b.n	80056ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056da:	f7fc f803 	bl	80016e4 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e086      	b.n	80057fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056ec:	4b45      	ldr	r3, [pc, #276]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f0      	bne.n	80056da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80056f8:	4b42      	ldr	r3, [pc, #264]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	031b      	lsls	r3, r3, #12
 8005706:	493f      	ldr	r1, [pc, #252]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	628b      	str	r3, [r1, #40]	@ 0x28
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	3b01      	subs	r3, #1
 8005712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	3b01      	subs	r3, #1
 800571c:	025b      	lsls	r3, r3, #9
 800571e:	b29b      	uxth	r3, r3
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	3b01      	subs	r3, #1
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	3b01      	subs	r3, #1
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800573c:	4931      	ldr	r1, [pc, #196]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 800573e:	4313      	orrs	r3, r2
 8005740:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005742:	4b30      	ldr	r3, [pc, #192]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	492d      	ldr	r1, [pc, #180]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005754:	4b2b      	ldr	r3, [pc, #172]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	f023 0220 	bic.w	r2, r3, #32
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	4928      	ldr	r1, [pc, #160]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005766:	4b27      	ldr	r3, [pc, #156]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	4a26      	ldr	r2, [pc, #152]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 800576c:	f023 0310 	bic.w	r3, r3, #16
 8005770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005772:	4b24      	ldr	r3, [pc, #144]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005776:	4b24      	ldr	r3, [pc, #144]	@ (8005808 <RCCEx_PLL2_Config+0x160>)
 8005778:	4013      	ands	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	69d2      	ldr	r2, [r2, #28]
 800577e:	00d2      	lsls	r2, r2, #3
 8005780:	4920      	ldr	r1, [pc, #128]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005786:	4b1f      	ldr	r3, [pc, #124]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	4a1e      	ldr	r2, [pc, #120]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 800578c:	f043 0310 	orr.w	r3, r3, #16
 8005790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005798:	4b1a      	ldr	r3, [pc, #104]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a19      	ldr	r2, [pc, #100]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 800579e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057a4:	e00f      	b.n	80057c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d106      	bne.n	80057ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057ac:	4b15      	ldr	r3, [pc, #84]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	4a14      	ldr	r2, [pc, #80]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80057b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057b8:	e005      	b.n	80057c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	4a11      	ldr	r2, [pc, #68]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80057c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80057cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d2:	f7fb ff87 	bl	80016e4 <HAL_GetTick>
 80057d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057d8:	e008      	b.n	80057ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057da:	f7fb ff83 	bl	80016e4 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e006      	b.n	80057fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <RCCEx_PLL2_Config+0x15c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	58024400 	.word	0x58024400
 8005808:	ffff0007 	.word	0xffff0007

0800580c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800581a:	4b53      	ldr	r3, [pc, #332]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 800581c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d101      	bne.n	800582a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e099      	b.n	800595e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800582a:	4b4f      	ldr	r3, [pc, #316]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a4e      	ldr	r2, [pc, #312]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005836:	f7fb ff55 	bl	80016e4 <HAL_GetTick>
 800583a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800583c:	e008      	b.n	8005850 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800583e:	f7fb ff51 	bl	80016e4 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e086      	b.n	800595e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005850:	4b45      	ldr	r3, [pc, #276]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f0      	bne.n	800583e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800585c:	4b42      	ldr	r3, [pc, #264]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	051b      	lsls	r3, r3, #20
 800586a:	493f      	ldr	r1, [pc, #252]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	3b01      	subs	r3, #1
 8005876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	3b01      	subs	r3, #1
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	b29b      	uxth	r3, r3
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	3b01      	subs	r3, #1
 800588c:	041b      	lsls	r3, r3, #16
 800588e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	3b01      	subs	r3, #1
 800589a:	061b      	lsls	r3, r3, #24
 800589c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058a0:	4931      	ldr	r1, [pc, #196]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058a6:	4b30      	ldr	r3, [pc, #192]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	492d      	ldr	r1, [pc, #180]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	4928      	ldr	r1, [pc, #160]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058ca:	4b27      	ldr	r3, [pc, #156]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	4a26      	ldr	r2, [pc, #152]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058d6:	4b24      	ldr	r3, [pc, #144]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058da:	4b24      	ldr	r3, [pc, #144]	@ (800596c <RCCEx_PLL3_Config+0x160>)
 80058dc:	4013      	ands	r3, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	69d2      	ldr	r2, [r2, #28]
 80058e2:	00d2      	lsls	r2, r2, #3
 80058e4:	4920      	ldr	r1, [pc, #128]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80058ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80058fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4a19      	ldr	r2, [pc, #100]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005902:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005908:	e00f      	b.n	800592a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d106      	bne.n	800591e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005910:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	4a14      	ldr	r2, [pc, #80]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005916:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800591a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800591c:	e005      	b.n	800592a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800591e:	4b12      	ldr	r3, [pc, #72]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	4a11      	ldr	r2, [pc, #68]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005928:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800592a:	4b0f      	ldr	r3, [pc, #60]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a0e      	ldr	r2, [pc, #56]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005936:	f7fb fed5 	bl	80016e4 <HAL_GetTick>
 800593a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800593c:	e008      	b.n	8005950 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800593e:	f7fb fed1 	bl	80016e4 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e006      	b.n	800595e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005950:	4b05      	ldr	r3, [pc, #20]	@ (8005968 <RCCEx_PLL3_Config+0x15c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	ffff0007 	.word	0xffff0007

08005970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e042      	b.n	8005a08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fb fcdb 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2224      	movs	r2, #36	@ 0x24
 800599e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 ff22 	bl	8006804 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f8b3 	bl	8005b2c <UART_SetConfig>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e01b      	b.n	8005a08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 ffa1 	bl	8006948 <UART_CheckIdleState>
 8005a06:	4603      	mov	r3, r0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	@ 0x28
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d17b      	bne.n	8005b22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_UART_Transmit+0x26>
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e074      	b.n	8005b24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2221      	movs	r2, #33	@ 0x21
 8005a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a4a:	f7fb fe4b 	bl	80016e4 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a68:	d108      	bne.n	8005a7c <HAL_UART_Transmit+0x6c>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e003      	b.n	8005a84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a84:	e030      	b.n	8005ae8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2180      	movs	r1, #128	@ 0x80
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f001 f803 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e03d      	b.n	8005b24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005abc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e007      	b.n	8005ad6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1c8      	bne.n	8005a86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	2140      	movs	r1, #64	@ 0x40
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 ffcc 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e006      	b.n	8005b24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b30:	b092      	sub	sp, #72	@ 0x48
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4bbe      	ldr	r3, [pc, #760]	@ (8005e54 <UART_SetConfig+0x328>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4ab3      	ldr	r2, [pc, #716]	@ (8005e58 <UART_SetConfig+0x32c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b94:	4313      	orrs	r3, r2
 8005b96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	4baf      	ldr	r3, [pc, #700]	@ (8005e5c <UART_SetConfig+0x330>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	f023 010f 	bic.w	r1, r3, #15
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4aa6      	ldr	r2, [pc, #664]	@ (8005e60 <UART_SetConfig+0x334>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d177      	bne.n	8005cbc <UART_SetConfig+0x190>
 8005bcc:	4ba5      	ldr	r3, [pc, #660]	@ (8005e64 <UART_SetConfig+0x338>)
 8005bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bd4:	2b28      	cmp	r3, #40	@ 0x28
 8005bd6:	d86d      	bhi.n	8005cb4 <UART_SetConfig+0x188>
 8005bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <UART_SetConfig+0xb4>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c85 	.word	0x08005c85
 8005be4:	08005cb5 	.word	0x08005cb5
 8005be8:	08005cb5 	.word	0x08005cb5
 8005bec:	08005cb5 	.word	0x08005cb5
 8005bf0:	08005cb5 	.word	0x08005cb5
 8005bf4:	08005cb5 	.word	0x08005cb5
 8005bf8:	08005cb5 	.word	0x08005cb5
 8005bfc:	08005cb5 	.word	0x08005cb5
 8005c00:	08005c8d 	.word	0x08005c8d
 8005c04:	08005cb5 	.word	0x08005cb5
 8005c08:	08005cb5 	.word	0x08005cb5
 8005c0c:	08005cb5 	.word	0x08005cb5
 8005c10:	08005cb5 	.word	0x08005cb5
 8005c14:	08005cb5 	.word	0x08005cb5
 8005c18:	08005cb5 	.word	0x08005cb5
 8005c1c:	08005cb5 	.word	0x08005cb5
 8005c20:	08005c95 	.word	0x08005c95
 8005c24:	08005cb5 	.word	0x08005cb5
 8005c28:	08005cb5 	.word	0x08005cb5
 8005c2c:	08005cb5 	.word	0x08005cb5
 8005c30:	08005cb5 	.word	0x08005cb5
 8005c34:	08005cb5 	.word	0x08005cb5
 8005c38:	08005cb5 	.word	0x08005cb5
 8005c3c:	08005cb5 	.word	0x08005cb5
 8005c40:	08005c9d 	.word	0x08005c9d
 8005c44:	08005cb5 	.word	0x08005cb5
 8005c48:	08005cb5 	.word	0x08005cb5
 8005c4c:	08005cb5 	.word	0x08005cb5
 8005c50:	08005cb5 	.word	0x08005cb5
 8005c54:	08005cb5 	.word	0x08005cb5
 8005c58:	08005cb5 	.word	0x08005cb5
 8005c5c:	08005cb5 	.word	0x08005cb5
 8005c60:	08005ca5 	.word	0x08005ca5
 8005c64:	08005cb5 	.word	0x08005cb5
 8005c68:	08005cb5 	.word	0x08005cb5
 8005c6c:	08005cb5 	.word	0x08005cb5
 8005c70:	08005cb5 	.word	0x08005cb5
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005cb5 	.word	0x08005cb5
 8005c7c:	08005cb5 	.word	0x08005cb5
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	2301      	movs	r3, #1
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e326      	b.n	80062da <UART_SetConfig+0x7ae>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e322      	b.n	80062da <UART_SetConfig+0x7ae>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e31e      	b.n	80062da <UART_SetConfig+0x7ae>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e31a      	b.n	80062da <UART_SetConfig+0x7ae>
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e316      	b.n	80062da <UART_SetConfig+0x7ae>
 8005cac:	2340      	movs	r3, #64	@ 0x40
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e312      	b.n	80062da <UART_SetConfig+0x7ae>
 8005cb4:	2380      	movs	r3, #128	@ 0x80
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e30e      	b.n	80062da <UART_SetConfig+0x7ae>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a69      	ldr	r2, [pc, #420]	@ (8005e68 <UART_SetConfig+0x33c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d130      	bne.n	8005d28 <UART_SetConfig+0x1fc>
 8005cc6:	4b67      	ldr	r3, [pc, #412]	@ (8005e64 <UART_SetConfig+0x338>)
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d826      	bhi.n	8005d20 <UART_SetConfig+0x1f4>
 8005cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <UART_SetConfig+0x1ac>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005cf1 	.word	0x08005cf1
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	08005d01 	.word	0x08005d01
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e2f0      	b.n	80062da <UART_SetConfig+0x7ae>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e2ec      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d00:	2308      	movs	r3, #8
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e2e8      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e2e4      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d10:	2320      	movs	r3, #32
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e2e0      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d18:	2340      	movs	r3, #64	@ 0x40
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e2dc      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d20:	2380      	movs	r3, #128	@ 0x80
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e2d8      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8005e6c <UART_SetConfig+0x340>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d130      	bne.n	8005d94 <UART_SetConfig+0x268>
 8005d32:	4b4c      	ldr	r3, [pc, #304]	@ (8005e64 <UART_SetConfig+0x338>)
 8005d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d826      	bhi.n	8005d8c <UART_SetConfig+0x260>
 8005d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <UART_SetConfig+0x218>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d5d 	.word	0x08005d5d
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	08005d6d 	.word	0x08005d6d
 8005d50:	08005d75 	.word	0x08005d75
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d85 	.word	0x08005d85
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e2ba      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d64:	2304      	movs	r3, #4
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6a:	e2b6      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e2b2      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d74:	2310      	movs	r3, #16
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e2ae      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e2aa      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d84:	2340      	movs	r3, #64	@ 0x40
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e2a6      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d8c:	2380      	movs	r3, #128	@ 0x80
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e2a2      	b.n	80062da <UART_SetConfig+0x7ae>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a35      	ldr	r2, [pc, #212]	@ (8005e70 <UART_SetConfig+0x344>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d130      	bne.n	8005e00 <UART_SetConfig+0x2d4>
 8005d9e:	4b31      	ldr	r3, [pc, #196]	@ (8005e64 <UART_SetConfig+0x338>)
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d826      	bhi.n	8005df8 <UART_SetConfig+0x2cc>
 8005daa:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <UART_SetConfig+0x284>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dc9 	.word	0x08005dc9
 8005db4:	08005dd1 	.word	0x08005dd1
 8005db8:	08005dd9 	.word	0x08005dd9
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005de9 	.word	0x08005de9
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dce:	e284      	b.n	80062da <UART_SetConfig+0x7ae>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd6:	e280      	b.n	80062da <UART_SetConfig+0x7ae>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dde:	e27c      	b.n	80062da <UART_SetConfig+0x7ae>
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e278      	b.n	80062da <UART_SetConfig+0x7ae>
 8005de8:	2320      	movs	r3, #32
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e274      	b.n	80062da <UART_SetConfig+0x7ae>
 8005df0:	2340      	movs	r3, #64	@ 0x40
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e270      	b.n	80062da <UART_SetConfig+0x7ae>
 8005df8:	2380      	movs	r3, #128	@ 0x80
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e26c      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1b      	ldr	r2, [pc, #108]	@ (8005e74 <UART_SetConfig+0x348>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d142      	bne.n	8005e90 <UART_SetConfig+0x364>
 8005e0a:	4b16      	ldr	r3, [pc, #88]	@ (8005e64 <UART_SetConfig+0x338>)
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d838      	bhi.n	8005e88 <UART_SetConfig+0x35c>
 8005e16:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <UART_SetConfig+0x2f0>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e35 	.word	0x08005e35
 8005e20:	08005e3d 	.word	0x08005e3d
 8005e24:	08005e45 	.word	0x08005e45
 8005e28:	08005e4d 	.word	0x08005e4d
 8005e2c:	08005e79 	.word	0x08005e79
 8005e30:	08005e81 	.word	0x08005e81
 8005e34:	2300      	movs	r3, #0
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e24e      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e24a      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e44:	2308      	movs	r3, #8
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e246      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e242      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e54:	cfff69f3 	.word	0xcfff69f3
 8005e58:	58000c00 	.word	0x58000c00
 8005e5c:	11fff4ff 	.word	0x11fff4ff
 8005e60:	40011000 	.word	0x40011000
 8005e64:	58024400 	.word	0x58024400
 8005e68:	40004400 	.word	0x40004400
 8005e6c:	40004800 	.word	0x40004800
 8005e70:	40004c00 	.word	0x40004c00
 8005e74:	40005000 	.word	0x40005000
 8005e78:	2320      	movs	r3, #32
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e22c      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e80:	2340      	movs	r3, #64	@ 0x40
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e228      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e224      	b.n	80062da <UART_SetConfig+0x7ae>
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4ab1      	ldr	r2, [pc, #708]	@ (800615c <UART_SetConfig+0x630>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d176      	bne.n	8005f88 <UART_SetConfig+0x45c>
 8005e9a:	4bb1      	ldr	r3, [pc, #708]	@ (8006160 <UART_SetConfig+0x634>)
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ea2:	2b28      	cmp	r3, #40	@ 0x28
 8005ea4:	d86c      	bhi.n	8005f80 <UART_SetConfig+0x454>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <UART_SetConfig+0x380>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005f51 	.word	0x08005f51
 8005eb0:	08005f81 	.word	0x08005f81
 8005eb4:	08005f81 	.word	0x08005f81
 8005eb8:	08005f81 	.word	0x08005f81
 8005ebc:	08005f81 	.word	0x08005f81
 8005ec0:	08005f81 	.word	0x08005f81
 8005ec4:	08005f81 	.word	0x08005f81
 8005ec8:	08005f81 	.word	0x08005f81
 8005ecc:	08005f59 	.word	0x08005f59
 8005ed0:	08005f81 	.word	0x08005f81
 8005ed4:	08005f81 	.word	0x08005f81
 8005ed8:	08005f81 	.word	0x08005f81
 8005edc:	08005f81 	.word	0x08005f81
 8005ee0:	08005f81 	.word	0x08005f81
 8005ee4:	08005f81 	.word	0x08005f81
 8005ee8:	08005f81 	.word	0x08005f81
 8005eec:	08005f61 	.word	0x08005f61
 8005ef0:	08005f81 	.word	0x08005f81
 8005ef4:	08005f81 	.word	0x08005f81
 8005ef8:	08005f81 	.word	0x08005f81
 8005efc:	08005f81 	.word	0x08005f81
 8005f00:	08005f81 	.word	0x08005f81
 8005f04:	08005f81 	.word	0x08005f81
 8005f08:	08005f81 	.word	0x08005f81
 8005f0c:	08005f69 	.word	0x08005f69
 8005f10:	08005f81 	.word	0x08005f81
 8005f14:	08005f81 	.word	0x08005f81
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005f81 	.word	0x08005f81
 8005f20:	08005f81 	.word	0x08005f81
 8005f24:	08005f81 	.word	0x08005f81
 8005f28:	08005f81 	.word	0x08005f81
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f81 	.word	0x08005f81
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f81 	.word	0x08005f81
 8005f3c:	08005f81 	.word	0x08005f81
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	08005f81 	.word	0x08005f81
 8005f48:	08005f81 	.word	0x08005f81
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f56:	e1c0      	b.n	80062da <UART_SetConfig+0x7ae>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e1bc      	b.n	80062da <UART_SetConfig+0x7ae>
 8005f60:	2308      	movs	r3, #8
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e1b8      	b.n	80062da <UART_SetConfig+0x7ae>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e1b4      	b.n	80062da <UART_SetConfig+0x7ae>
 8005f70:	2320      	movs	r3, #32
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e1b0      	b.n	80062da <UART_SetConfig+0x7ae>
 8005f78:	2340      	movs	r3, #64	@ 0x40
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e1ac      	b.n	80062da <UART_SetConfig+0x7ae>
 8005f80:	2380      	movs	r3, #128	@ 0x80
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e1a8      	b.n	80062da <UART_SetConfig+0x7ae>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a75      	ldr	r2, [pc, #468]	@ (8006164 <UART_SetConfig+0x638>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d130      	bne.n	8005ff4 <UART_SetConfig+0x4c8>
 8005f92:	4b73      	ldr	r3, [pc, #460]	@ (8006160 <UART_SetConfig+0x634>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d826      	bhi.n	8005fec <UART_SetConfig+0x4c0>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <UART_SetConfig+0x478>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fbd 	.word	0x08005fbd
 8005fa8:	08005fc5 	.word	0x08005fc5
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc2:	e18a      	b.n	80062da <UART_SetConfig+0x7ae>
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fca:	e186      	b.n	80062da <UART_SetConfig+0x7ae>
 8005fcc:	2308      	movs	r3, #8
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e182      	b.n	80062da <UART_SetConfig+0x7ae>
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e17e      	b.n	80062da <UART_SetConfig+0x7ae>
 8005fdc:	2320      	movs	r3, #32
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e17a      	b.n	80062da <UART_SetConfig+0x7ae>
 8005fe4:	2340      	movs	r3, #64	@ 0x40
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e176      	b.n	80062da <UART_SetConfig+0x7ae>
 8005fec:	2380      	movs	r3, #128	@ 0x80
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e172      	b.n	80062da <UART_SetConfig+0x7ae>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a5b      	ldr	r2, [pc, #364]	@ (8006168 <UART_SetConfig+0x63c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d130      	bne.n	8006060 <UART_SetConfig+0x534>
 8005ffe:	4b58      	ldr	r3, [pc, #352]	@ (8006160 <UART_SetConfig+0x634>)
 8006000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	2b05      	cmp	r3, #5
 8006008:	d826      	bhi.n	8006058 <UART_SetConfig+0x52c>
 800600a:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <UART_SetConfig+0x4e4>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006029 	.word	0x08006029
 8006014:	08006031 	.word	0x08006031
 8006018:	08006039 	.word	0x08006039
 800601c:	08006041 	.word	0x08006041
 8006020:	08006049 	.word	0x08006049
 8006024:	08006051 	.word	0x08006051
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602e:	e154      	b.n	80062da <UART_SetConfig+0x7ae>
 8006030:	2304      	movs	r3, #4
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006036:	e150      	b.n	80062da <UART_SetConfig+0x7ae>
 8006038:	2308      	movs	r3, #8
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603e:	e14c      	b.n	80062da <UART_SetConfig+0x7ae>
 8006040:	2310      	movs	r3, #16
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e148      	b.n	80062da <UART_SetConfig+0x7ae>
 8006048:	2320      	movs	r3, #32
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e144      	b.n	80062da <UART_SetConfig+0x7ae>
 8006050:	2340      	movs	r3, #64	@ 0x40
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e140      	b.n	80062da <UART_SetConfig+0x7ae>
 8006058:	2380      	movs	r3, #128	@ 0x80
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e13c      	b.n	80062da <UART_SetConfig+0x7ae>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a41      	ldr	r2, [pc, #260]	@ (800616c <UART_SetConfig+0x640>)
 8006066:	4293      	cmp	r3, r2
 8006068:	f040 8082 	bne.w	8006170 <UART_SetConfig+0x644>
 800606c:	4b3c      	ldr	r3, [pc, #240]	@ (8006160 <UART_SetConfig+0x634>)
 800606e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006074:	2b28      	cmp	r3, #40	@ 0x28
 8006076:	d86d      	bhi.n	8006154 <UART_SetConfig+0x628>
 8006078:	a201      	add	r2, pc, #4	@ (adr r2, 8006080 <UART_SetConfig+0x554>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	08006125 	.word	0x08006125
 8006084:	08006155 	.word	0x08006155
 8006088:	08006155 	.word	0x08006155
 800608c:	08006155 	.word	0x08006155
 8006090:	08006155 	.word	0x08006155
 8006094:	08006155 	.word	0x08006155
 8006098:	08006155 	.word	0x08006155
 800609c:	08006155 	.word	0x08006155
 80060a0:	0800612d 	.word	0x0800612d
 80060a4:	08006155 	.word	0x08006155
 80060a8:	08006155 	.word	0x08006155
 80060ac:	08006155 	.word	0x08006155
 80060b0:	08006155 	.word	0x08006155
 80060b4:	08006155 	.word	0x08006155
 80060b8:	08006155 	.word	0x08006155
 80060bc:	08006155 	.word	0x08006155
 80060c0:	08006135 	.word	0x08006135
 80060c4:	08006155 	.word	0x08006155
 80060c8:	08006155 	.word	0x08006155
 80060cc:	08006155 	.word	0x08006155
 80060d0:	08006155 	.word	0x08006155
 80060d4:	08006155 	.word	0x08006155
 80060d8:	08006155 	.word	0x08006155
 80060dc:	08006155 	.word	0x08006155
 80060e0:	0800613d 	.word	0x0800613d
 80060e4:	08006155 	.word	0x08006155
 80060e8:	08006155 	.word	0x08006155
 80060ec:	08006155 	.word	0x08006155
 80060f0:	08006155 	.word	0x08006155
 80060f4:	08006155 	.word	0x08006155
 80060f8:	08006155 	.word	0x08006155
 80060fc:	08006155 	.word	0x08006155
 8006100:	08006145 	.word	0x08006145
 8006104:	08006155 	.word	0x08006155
 8006108:	08006155 	.word	0x08006155
 800610c:	08006155 	.word	0x08006155
 8006110:	08006155 	.word	0x08006155
 8006114:	08006155 	.word	0x08006155
 8006118:	08006155 	.word	0x08006155
 800611c:	08006155 	.word	0x08006155
 8006120:	0800614d 	.word	0x0800614d
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612a:	e0d6      	b.n	80062da <UART_SetConfig+0x7ae>
 800612c:	2304      	movs	r3, #4
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e0d2      	b.n	80062da <UART_SetConfig+0x7ae>
 8006134:	2308      	movs	r3, #8
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613a:	e0ce      	b.n	80062da <UART_SetConfig+0x7ae>
 800613c:	2310      	movs	r3, #16
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006142:	e0ca      	b.n	80062da <UART_SetConfig+0x7ae>
 8006144:	2320      	movs	r3, #32
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614a:	e0c6      	b.n	80062da <UART_SetConfig+0x7ae>
 800614c:	2340      	movs	r3, #64	@ 0x40
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006152:	e0c2      	b.n	80062da <UART_SetConfig+0x7ae>
 8006154:	2380      	movs	r3, #128	@ 0x80
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615a:	e0be      	b.n	80062da <UART_SetConfig+0x7ae>
 800615c:	40011400 	.word	0x40011400
 8006160:	58024400 	.word	0x58024400
 8006164:	40007800 	.word	0x40007800
 8006168:	40007c00 	.word	0x40007c00
 800616c:	40011800 	.word	0x40011800
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4aad      	ldr	r2, [pc, #692]	@ (800642c <UART_SetConfig+0x900>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d176      	bne.n	8006268 <UART_SetConfig+0x73c>
 800617a:	4bad      	ldr	r3, [pc, #692]	@ (8006430 <UART_SetConfig+0x904>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006182:	2b28      	cmp	r3, #40	@ 0x28
 8006184:	d86c      	bhi.n	8006260 <UART_SetConfig+0x734>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <UART_SetConfig+0x660>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	08006231 	.word	0x08006231
 8006190:	08006261 	.word	0x08006261
 8006194:	08006261 	.word	0x08006261
 8006198:	08006261 	.word	0x08006261
 800619c:	08006261 	.word	0x08006261
 80061a0:	08006261 	.word	0x08006261
 80061a4:	08006261 	.word	0x08006261
 80061a8:	08006261 	.word	0x08006261
 80061ac:	08006239 	.word	0x08006239
 80061b0:	08006261 	.word	0x08006261
 80061b4:	08006261 	.word	0x08006261
 80061b8:	08006261 	.word	0x08006261
 80061bc:	08006261 	.word	0x08006261
 80061c0:	08006261 	.word	0x08006261
 80061c4:	08006261 	.word	0x08006261
 80061c8:	08006261 	.word	0x08006261
 80061cc:	08006241 	.word	0x08006241
 80061d0:	08006261 	.word	0x08006261
 80061d4:	08006261 	.word	0x08006261
 80061d8:	08006261 	.word	0x08006261
 80061dc:	08006261 	.word	0x08006261
 80061e0:	08006261 	.word	0x08006261
 80061e4:	08006261 	.word	0x08006261
 80061e8:	08006261 	.word	0x08006261
 80061ec:	08006249 	.word	0x08006249
 80061f0:	08006261 	.word	0x08006261
 80061f4:	08006261 	.word	0x08006261
 80061f8:	08006261 	.word	0x08006261
 80061fc:	08006261 	.word	0x08006261
 8006200:	08006261 	.word	0x08006261
 8006204:	08006261 	.word	0x08006261
 8006208:	08006261 	.word	0x08006261
 800620c:	08006251 	.word	0x08006251
 8006210:	08006261 	.word	0x08006261
 8006214:	08006261 	.word	0x08006261
 8006218:	08006261 	.word	0x08006261
 800621c:	08006261 	.word	0x08006261
 8006220:	08006261 	.word	0x08006261
 8006224:	08006261 	.word	0x08006261
 8006228:	08006261 	.word	0x08006261
 800622c:	08006259 	.word	0x08006259
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e050      	b.n	80062da <UART_SetConfig+0x7ae>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e04c      	b.n	80062da <UART_SetConfig+0x7ae>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e048      	b.n	80062da <UART_SetConfig+0x7ae>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e044      	b.n	80062da <UART_SetConfig+0x7ae>
 8006250:	2320      	movs	r3, #32
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e040      	b.n	80062da <UART_SetConfig+0x7ae>
 8006258:	2340      	movs	r3, #64	@ 0x40
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e03c      	b.n	80062da <UART_SetConfig+0x7ae>
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e038      	b.n	80062da <UART_SetConfig+0x7ae>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a71      	ldr	r2, [pc, #452]	@ (8006434 <UART_SetConfig+0x908>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d130      	bne.n	80062d4 <UART_SetConfig+0x7a8>
 8006272:	4b6f      	ldr	r3, [pc, #444]	@ (8006430 <UART_SetConfig+0x904>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b05      	cmp	r3, #5
 800627c:	d826      	bhi.n	80062cc <UART_SetConfig+0x7a0>
 800627e:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x758>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	0800629d 	.word	0x0800629d
 8006288:	080062a5 	.word	0x080062a5
 800628c:	080062ad 	.word	0x080062ad
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062c5 	.word	0x080062c5
 800629c:	2302      	movs	r3, #2
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e01a      	b.n	80062da <UART_SetConfig+0x7ae>
 80062a4:	2304      	movs	r3, #4
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e016      	b.n	80062da <UART_SetConfig+0x7ae>
 80062ac:	2308      	movs	r3, #8
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e012      	b.n	80062da <UART_SetConfig+0x7ae>
 80062b4:	2310      	movs	r3, #16
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e00e      	b.n	80062da <UART_SetConfig+0x7ae>
 80062bc:	2320      	movs	r3, #32
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e00a      	b.n	80062da <UART_SetConfig+0x7ae>
 80062c4:	2340      	movs	r3, #64	@ 0x40
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e006      	b.n	80062da <UART_SetConfig+0x7ae>
 80062cc:	2380      	movs	r3, #128	@ 0x80
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d2:	e002      	b.n	80062da <UART_SetConfig+0x7ae>
 80062d4:	2380      	movs	r3, #128	@ 0x80
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a55      	ldr	r2, [pc, #340]	@ (8006434 <UART_SetConfig+0x908>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	f040 80f8 	bne.w	80064d6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	dc46      	bgt.n	800637c <UART_SetConfig+0x850>
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	db75      	blt.n	80063de <UART_SetConfig+0x8b2>
 80062f2:	3b02      	subs	r3, #2
 80062f4:	2b1e      	cmp	r3, #30
 80062f6:	d872      	bhi.n	80063de <UART_SetConfig+0x8b2>
 80062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <UART_SetConfig+0x7d4>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006383 	.word	0x08006383
 8006304:	080063df 	.word	0x080063df
 8006308:	0800638b 	.word	0x0800638b
 800630c:	080063df 	.word	0x080063df
 8006310:	080063df 	.word	0x080063df
 8006314:	080063df 	.word	0x080063df
 8006318:	0800639b 	.word	0x0800639b
 800631c:	080063df 	.word	0x080063df
 8006320:	080063df 	.word	0x080063df
 8006324:	080063df 	.word	0x080063df
 8006328:	080063df 	.word	0x080063df
 800632c:	080063df 	.word	0x080063df
 8006330:	080063df 	.word	0x080063df
 8006334:	080063df 	.word	0x080063df
 8006338:	080063ab 	.word	0x080063ab
 800633c:	080063df 	.word	0x080063df
 8006340:	080063df 	.word	0x080063df
 8006344:	080063df 	.word	0x080063df
 8006348:	080063df 	.word	0x080063df
 800634c:	080063df 	.word	0x080063df
 8006350:	080063df 	.word	0x080063df
 8006354:	080063df 	.word	0x080063df
 8006358:	080063df 	.word	0x080063df
 800635c:	080063df 	.word	0x080063df
 8006360:	080063df 	.word	0x080063df
 8006364:	080063df 	.word	0x080063df
 8006368:	080063df 	.word	0x080063df
 800636c:	080063df 	.word	0x080063df
 8006370:	080063df 	.word	0x080063df
 8006374:	080063df 	.word	0x080063df
 8006378:	080063d1 	.word	0x080063d1
 800637c:	2b40      	cmp	r3, #64	@ 0x40
 800637e:	d02a      	beq.n	80063d6 <UART_SetConfig+0x8aa>
 8006380:	e02d      	b.n	80063de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006382:	f7fe fed3 	bl	800512c <HAL_RCCEx_GetD3PCLK1Freq>
 8006386:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006388:	e02f      	b.n	80063ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800638a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fee2 	bl	8005158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006398:	e027      	b.n	80063ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800639a:	f107 0318 	add.w	r3, r7, #24
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f82e 	bl	8005400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a8:	e01f      	b.n	80063ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063aa:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <UART_SetConfig+0x904>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006430 <UART_SetConfig+0x904>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	08db      	lsrs	r3, r3, #3
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006438 <UART_SetConfig+0x90c>)
 80063c2:	fa22 f303 	lsr.w	r3, r2, r3
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063c8:	e00f      	b.n	80063ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <UART_SetConfig+0x90c>)
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ce:	e00c      	b.n	80063ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063d0:	4b1a      	ldr	r3, [pc, #104]	@ (800643c <UART_SetConfig+0x910>)
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d4:	e009      	b.n	80063ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063dc:	e005      	b.n	80063ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 81ee 	beq.w	80067ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	4a12      	ldr	r2, [pc, #72]	@ (8006440 <UART_SetConfig+0x914>)
 80063f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006400:	fbb3 f3f2 	udiv	r3, r3, r2
 8006404:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006412:	429a      	cmp	r2, r3
 8006414:	d305      	bcc.n	8006422 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800641c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641e:	429a      	cmp	r2, r3
 8006420:	d910      	bls.n	8006444 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006428:	e1d1      	b.n	80067ce <UART_SetConfig+0xca2>
 800642a:	bf00      	nop
 800642c:	40011c00 	.word	0x40011c00
 8006430:	58024400 	.word	0x58024400
 8006434:	58000c00 	.word	0x58000c00
 8006438:	03d09000 	.word	0x03d09000
 800643c:	003d0900 	.word	0x003d0900
 8006440:	0800728c 	.word	0x0800728c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006446:	2200      	movs	r2, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	60fa      	str	r2, [r7, #12]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	4ac0      	ldr	r2, [pc, #768]	@ (8006754 <UART_SetConfig+0xc28>)
 8006452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006456:	b29b      	uxth	r3, r3
 8006458:	2200      	movs	r2, #0
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006466:	f7f9 ff59 	bl	800031c <__aeabi_uldivmod>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	020b      	lsls	r3, r1, #8
 800647c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006480:	0202      	lsls	r2, r0, #8
 8006482:	6979      	ldr	r1, [r7, #20]
 8006484:	6849      	ldr	r1, [r1, #4]
 8006486:	0849      	lsrs	r1, r1, #1
 8006488:	2000      	movs	r0, #0
 800648a:	460c      	mov	r4, r1
 800648c:	4605      	mov	r5, r0
 800648e:	eb12 0804 	adds.w	r8, r2, r4
 8006492:	eb43 0905 	adc.w	r9, r3, r5
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	469a      	mov	sl, r3
 800649e:	4693      	mov	fp, r2
 80064a0:	4652      	mov	r2, sl
 80064a2:	465b      	mov	r3, fp
 80064a4:	4640      	mov	r0, r8
 80064a6:	4649      	mov	r1, r9
 80064a8:	f7f9 ff38 	bl	800031c <__aeabi_uldivmod>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4613      	mov	r3, r2
 80064b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ba:	d308      	bcc.n	80064ce <UART_SetConfig+0x9a2>
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064c2:	d204      	bcs.n	80064ce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	e17f      	b.n	80067ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064d4:	e17b      	b.n	80067ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064de:	f040 80bd 	bne.w	800665c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80064e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	dc48      	bgt.n	800657c <UART_SetConfig+0xa50>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	db7b      	blt.n	80065e6 <UART_SetConfig+0xaba>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d879      	bhi.n	80065e6 <UART_SetConfig+0xaba>
 80064f2:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <UART_SetConfig+0x9cc>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	08006583 	.word	0x08006583
 80064fc:	0800658b 	.word	0x0800658b
 8006500:	080065e7 	.word	0x080065e7
 8006504:	080065e7 	.word	0x080065e7
 8006508:	08006593 	.word	0x08006593
 800650c:	080065e7 	.word	0x080065e7
 8006510:	080065e7 	.word	0x080065e7
 8006514:	080065e7 	.word	0x080065e7
 8006518:	080065a3 	.word	0x080065a3
 800651c:	080065e7 	.word	0x080065e7
 8006520:	080065e7 	.word	0x080065e7
 8006524:	080065e7 	.word	0x080065e7
 8006528:	080065e7 	.word	0x080065e7
 800652c:	080065e7 	.word	0x080065e7
 8006530:	080065e7 	.word	0x080065e7
 8006534:	080065e7 	.word	0x080065e7
 8006538:	080065b3 	.word	0x080065b3
 800653c:	080065e7 	.word	0x080065e7
 8006540:	080065e7 	.word	0x080065e7
 8006544:	080065e7 	.word	0x080065e7
 8006548:	080065e7 	.word	0x080065e7
 800654c:	080065e7 	.word	0x080065e7
 8006550:	080065e7 	.word	0x080065e7
 8006554:	080065e7 	.word	0x080065e7
 8006558:	080065e7 	.word	0x080065e7
 800655c:	080065e7 	.word	0x080065e7
 8006560:	080065e7 	.word	0x080065e7
 8006564:	080065e7 	.word	0x080065e7
 8006568:	080065e7 	.word	0x080065e7
 800656c:	080065e7 	.word	0x080065e7
 8006570:	080065e7 	.word	0x080065e7
 8006574:	080065e7 	.word	0x080065e7
 8006578:	080065d9 	.word	0x080065d9
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	d02e      	beq.n	80065de <UART_SetConfig+0xab2>
 8006580:	e031      	b.n	80065e6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006582:	f7fd fc07 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8006586:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006588:	e033      	b.n	80065f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800658a:	f7fd fc19 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 800658e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006590:	e02f      	b.n	80065f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fdde 	bl	8005158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a0:	e027      	b.n	80065f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a2:	f107 0318 	add.w	r3, r7, #24
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fe ff2a 	bl	8005400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065b0:	e01f      	b.n	80065f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b2:	4b69      	ldr	r3, [pc, #420]	@ (8006758 <UART_SetConfig+0xc2c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065be:	4b66      	ldr	r3, [pc, #408]	@ (8006758 <UART_SetConfig+0xc2c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	08db      	lsrs	r3, r3, #3
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	4a64      	ldr	r2, [pc, #400]	@ (800675c <UART_SetConfig+0xc30>)
 80065ca:	fa22 f303 	lsr.w	r3, r2, r3
 80065ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065d0:	e00f      	b.n	80065f2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80065d2:	4b62      	ldr	r3, [pc, #392]	@ (800675c <UART_SetConfig+0xc30>)
 80065d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d6:	e00c      	b.n	80065f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065d8:	4b61      	ldr	r3, [pc, #388]	@ (8006760 <UART_SetConfig+0xc34>)
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065dc:	e009      	b.n	80065f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e4:	e005      	b.n	80065f2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80ea 	beq.w	80067ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	4a55      	ldr	r2, [pc, #340]	@ (8006754 <UART_SetConfig+0xc28>)
 8006600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006604:	461a      	mov	r2, r3
 8006606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006608:	fbb3 f3f2 	udiv	r3, r3, r2
 800660c:	005a      	lsls	r2, r3, #1
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	441a      	add	r2, r3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d916      	bls.n	8006654 <UART_SetConfig+0xb28>
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662c:	d212      	bcs.n	8006654 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	b29b      	uxth	r3, r3
 8006632:	f023 030f 	bic.w	r3, r3, #15
 8006636:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	b29b      	uxth	r3, r3
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	b29a      	uxth	r2, r3
 8006644:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006646:	4313      	orrs	r3, r2
 8006648:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e0bc      	b.n	80067ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800665a:	e0b8      	b.n	80067ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800665c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006660:	2b20      	cmp	r3, #32
 8006662:	dc4b      	bgt.n	80066fc <UART_SetConfig+0xbd0>
 8006664:	2b00      	cmp	r3, #0
 8006666:	f2c0 8087 	blt.w	8006778 <UART_SetConfig+0xc4c>
 800666a:	2b20      	cmp	r3, #32
 800666c:	f200 8084 	bhi.w	8006778 <UART_SetConfig+0xc4c>
 8006670:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <UART_SetConfig+0xb4c>)
 8006672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006676:	bf00      	nop
 8006678:	08006703 	.word	0x08006703
 800667c:	0800670b 	.word	0x0800670b
 8006680:	08006779 	.word	0x08006779
 8006684:	08006779 	.word	0x08006779
 8006688:	08006713 	.word	0x08006713
 800668c:	08006779 	.word	0x08006779
 8006690:	08006779 	.word	0x08006779
 8006694:	08006779 	.word	0x08006779
 8006698:	08006723 	.word	0x08006723
 800669c:	08006779 	.word	0x08006779
 80066a0:	08006779 	.word	0x08006779
 80066a4:	08006779 	.word	0x08006779
 80066a8:	08006779 	.word	0x08006779
 80066ac:	08006779 	.word	0x08006779
 80066b0:	08006779 	.word	0x08006779
 80066b4:	08006779 	.word	0x08006779
 80066b8:	08006733 	.word	0x08006733
 80066bc:	08006779 	.word	0x08006779
 80066c0:	08006779 	.word	0x08006779
 80066c4:	08006779 	.word	0x08006779
 80066c8:	08006779 	.word	0x08006779
 80066cc:	08006779 	.word	0x08006779
 80066d0:	08006779 	.word	0x08006779
 80066d4:	08006779 	.word	0x08006779
 80066d8:	08006779 	.word	0x08006779
 80066dc:	08006779 	.word	0x08006779
 80066e0:	08006779 	.word	0x08006779
 80066e4:	08006779 	.word	0x08006779
 80066e8:	08006779 	.word	0x08006779
 80066ec:	08006779 	.word	0x08006779
 80066f0:	08006779 	.word	0x08006779
 80066f4:	08006779 	.word	0x08006779
 80066f8:	0800676b 	.word	0x0800676b
 80066fc:	2b40      	cmp	r3, #64	@ 0x40
 80066fe:	d037      	beq.n	8006770 <UART_SetConfig+0xc44>
 8006700:	e03a      	b.n	8006778 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006702:	f7fd fb47 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8006706:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006708:	e03c      	b.n	8006784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800670a:	f7fd fb59 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 800670e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006710:	e038      	b.n	8006784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fd1e 	bl	8005158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006720:	e030      	b.n	8006784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006722:	f107 0318 	add.w	r3, r7, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fe6a 	bl	8005400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006730:	e028      	b.n	8006784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006732:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <UART_SetConfig+0xc2c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d012      	beq.n	8006764 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800673e:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <UART_SetConfig+0xc2c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	08db      	lsrs	r3, r3, #3
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	4a04      	ldr	r2, [pc, #16]	@ (800675c <UART_SetConfig+0xc30>)
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006750:	e018      	b.n	8006784 <UART_SetConfig+0xc58>
 8006752:	bf00      	nop
 8006754:	0800728c 	.word	0x0800728c
 8006758:	58024400 	.word	0x58024400
 800675c:	03d09000 	.word	0x03d09000
 8006760:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006764:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <UART_SetConfig+0xccc>)
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006768:	e00c      	b.n	8006784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800676a:	4b24      	ldr	r3, [pc, #144]	@ (80067fc <UART_SetConfig+0xcd0>)
 800676c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676e:	e009      	b.n	8006784 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006776:	e005      	b.n	8006784 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006782:	bf00      	nop
    }

    if (pclk != 0U)
 8006784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d021      	beq.n	80067ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	4a1c      	ldr	r2, [pc, #112]	@ (8006800 <UART_SetConfig+0xcd4>)
 8006790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006794:	461a      	mov	r2, r3
 8006796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006798:	fbb3 f2f2 	udiv	r2, r3, r2
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	441a      	add	r2, r3
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b0:	2b0f      	cmp	r3, #15
 80067b2:	d909      	bls.n	80067c8 <UART_SetConfig+0xc9c>
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ba:	d205      	bcs.n	80067c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067be:	b29a      	uxth	r2, r3
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	e002      	b.n	80067ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2201      	movs	r2, #1
 80067da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2200      	movs	r2, #0
 80067e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067ea:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3748      	adds	r7, #72	@ 0x48
 80067f2:	46bd      	mov	sp, r7
 80067f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f8:	03d09000 	.word	0x03d09000
 80067fc:	003d0900 	.word	0x003d0900
 8006800:	0800728c 	.word	0x0800728c

08006804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01a      	beq.n	800691a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006902:	d10a      	bne.n	800691a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b098      	sub	sp, #96	@ 0x60
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006958:	f7fa fec4 	bl	80016e4 <HAL_GetTick>
 800695c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b08      	cmp	r3, #8
 800696a:	d12f      	bne.n	80069cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006974:	2200      	movs	r2, #0
 8006976:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f88e 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d022      	beq.n	80069cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699a:	653b      	str	r3, [r7, #80]	@ 0x50
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e063      	b.n	8006a94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d149      	bne.n	8006a6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e2:	2200      	movs	r2, #0
 80069e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f857 	bl	8006a9c <UART_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d03c      	beq.n	8006a6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	623b      	str	r3, [r7, #32]
   return(result);
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e6      	bne.n	80069f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3308      	adds	r3, #8
 8006a44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a46:	61fa      	str	r2, [r7, #28]
 8006a48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	69b9      	ldr	r1, [r7, #24]
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	617b      	str	r3, [r7, #20]
   return(result);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e5      	bne.n	8006a26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e012      	b.n	8006a94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3758      	adds	r7, #88	@ 0x58
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aac:	e04f      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab4:	d04b      	beq.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab6:	f7fa fe15 	bl	80016e4 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e04e      	b.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d037      	beq.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b80      	cmp	r3, #128	@ 0x80
 8006ae2:	d034      	beq.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b40      	cmp	r3, #64	@ 0x40
 8006ae8:	d031      	beq.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d110      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2208      	movs	r2, #8
 8006afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f839 	bl	8006b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2208      	movs	r2, #8
 8006b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e029      	b.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b28:	d111      	bne.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f81f 	bl	8006b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e00f      	b.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69da      	ldr	r2, [r3, #28]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4013      	ands	r3, r2
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	bf0c      	ite	eq
 8006b5e:	2301      	moveq	r3, #1
 8006b60:	2300      	movne	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d0a0      	beq.n	8006aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b095      	sub	sp, #84	@ 0x54
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e6      	bne.n	8006b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c40 <UART_EndRxTransfer+0xc8>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e5      	bne.n	8006bb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d118      	bne.n	8006c20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 0310 	bic.w	r3, r3, #16
 8006c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e6      	bne.n	8006bee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c34:	bf00      	nop
 8006c36:	3754      	adds	r7, #84	@ 0x54
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	effffffe 	.word	0xeffffffe

08006c44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_UARTEx_DisableFifoMode+0x16>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e027      	b.n	8006caa <HAL_UARTEx_DisableFifoMode+0x66>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2224      	movs	r2, #36	@ 0x24
 8006c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0201 	bic.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e02d      	b.n	8006d2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2224      	movs	r2, #36	@ 0x24
 8006cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0201 	bic.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f850 	bl	8006db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e02d      	b.n	8006da6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2224      	movs	r2, #36	@ 0x24
 8006d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f812 	bl	8006db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d108      	bne.n	8006dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dd0:	e031      	b.n	8006e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	0e5b      	lsrs	r3, r3, #25
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	0f5b      	lsrs	r3, r3, #29
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	7b3a      	ldrb	r2, [r7, #12]
 8006dfe:	4911      	ldr	r1, [pc, #68]	@ (8006e44 <UARTEx_SetNbDataToProcess+0x94>)
 8006e00:	5c8a      	ldrb	r2, [r1, r2]
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e06:	7b3a      	ldrb	r2, [r7, #12]
 8006e08:	490f      	ldr	r1, [pc, #60]	@ (8006e48 <UARTEx_SetNbDataToProcess+0x98>)
 8006e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	7b7a      	ldrb	r2, [r7, #13]
 8006e1c:	4909      	ldr	r1, [pc, #36]	@ (8006e44 <UARTEx_SetNbDataToProcess+0x94>)
 8006e1e:	5c8a      	ldrb	r2, [r1, r2]
 8006e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e24:	7b7a      	ldrb	r2, [r7, #13]
 8006e26:	4908      	ldr	r1, [pc, #32]	@ (8006e48 <UARTEx_SetNbDataToProcess+0x98>)
 8006e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	080072a4 	.word	0x080072a4
 8006e48:	080072ac 	.word	0x080072ac

08006e4c <memset>:
 8006e4c:	4402      	add	r2, r0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d100      	bne.n	8006e56 <memset+0xa>
 8006e54:	4770      	bx	lr
 8006e56:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5a:	e7f9      	b.n	8006e50 <memset+0x4>

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	@ (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1b64      	subs	r4, r4, r5
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2600      	movs	r6, #0
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f000 f826 	bl	8006ec0 <_init>
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2600      	movs	r6, #0
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	080072bc 	.word	0x080072bc
 8006e98:	080072bc 	.word	0x080072bc
 8006e9c:	080072bc 	.word	0x080072bc
 8006ea0:	080072c0 	.word	0x080072c0

08006ea4 <memcpy>:
 8006ea4:	440a      	add	r2, r1
 8006ea6:	4291      	cmp	r1, r2
 8006ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eac:	d100      	bne.n	8006eb0 <memcpy+0xc>
 8006eae:	4770      	bx	lr
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	d1f9      	bne.n	8006eb2 <memcpy+0xe>
 8006ebe:	bd10      	pop	{r4, pc}

08006ec0 <_init>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	bf00      	nop
 8006ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec6:	bc08      	pop	{r3}
 8006ec8:	469e      	mov	lr, r3
 8006eca:	4770      	bx	lr

08006ecc <_fini>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr
